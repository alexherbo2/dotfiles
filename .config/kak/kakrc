# Kakoune
# https://kakoune.org
# https://github.com/mawww/kakoune
#
# Configuration:
#
# https://github.com/Delapouite/dot-in-the-sky/blob/master/.config/kak/kakrc
# https://github.com/mawww/config/blob/master/kakrc
# https://github.com/occivink/config/blob/master/.config/kak/kakrc
# https://github.com/topisani/dotfiles/blob/master/config/kak/kakrc
# https://gitlab.com/vbauerster/dotfiles/-/blob/master/.config/kak/kakrc

# theme = 'base16_transparent'
# Kakoune keyboard shortcuts
# https://kakoune.org

# VS Code keyboard shortcuts
# https://code.visualstudio.com/docs/getstarted/keybindings#_default-keyboard-shortcuts

# Helix
# https://helix-editor.com
# https://docs.helix-editor.com/keymap.html
# https://docs.helix-editor.com/commands.html
# https://docs.helix-editor.com/configuration.html
# https://github.com/helix-editor/helix/blob/master/helix-term/src/keymap/default.rs
# https://github.com/helix-editor/helix/blob/master/helix-term/src/commands.rs
# https://github.com/helix-editor/helix/blob/master/helix-term/src/commands/typed.rs
# https://github.com/helix-editor/helix/blob/master/helix-view/src/editor.rs

# Preamble ---------------------------------------------------------------------
define-command colorscheme -params 1 -docstring 'load color scheme' %{
  source "%val{config}/colors/%arg{1}.kak"
}
evaluate-commands %sh{
  find -L "$kak_config/autoload" -type f -name '*.kak' -exec printf 'source "%s";' {} +
}
# source "%val{config}/kakrc"
# source ~/.kakrc

# Preamble ---------------------------------------------------------------------

evaluate-commands %sh{
  kak-lsp --kakoune --session "$kak_session"
}
lsp-enable

# Options ----------------------------------------------------------------------

# UI options
set-option global startup_info_version 20221231
set-option global ui_options terminal_set_title=no terminal_assistant=none
# Matching pairs
set-option global matching_pairs ( ) { } [ ] < > “ ” ‘ ’ « » ‹ ›
set-option global scrolloff 5,1
add-highlighter global/show-matching show-matching
add-highlighter global/number-lines number-lines -hlcursor
add-highlighter global/soft_wrap wrap -word -indent -marker '↪'

# Status line
set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@%val{session}'

# Color scheme: One light (https://git.sr.ht/~raiguard/one.kak)
source "%val{runtime}/colors/default.kak"
# colorscheme one-light

# Custom faces
# set-face global Whitespace "rgb:%opt{bg}+f"
# set-face global SelectedText "rgb:%opt{blue}+f"

# System clipboard
# set-option global clipboard_copy_command 'pbcopy'
# set-option global clipboard_copy_args

# Highlight whitespace
# add-highlighter global/whitespace ref whitespace

# Highlight various characters
# https://unicode-table.com
add-highlighter global/U+2013 regex '–' '0:green+f'
add-highlighter global/U+2014 regex '—' '0:green+bf'
add-highlighter global/math-symbols regex '[−×]' '0:cyan+f'

# Mappings ---------------------------------------------------------------------

map -docstring 'erase characters before cursor to line begin' global insert <c-u> '<a-;>: erase_characters_before_cursor_to_line_begin<ret>'
map -docstring 'paste' global insert <c-y> '<c-r>"'
map -docstring 'Increase indent' global insert <tab> '<a-;><a-gt>'
map -docstring 'Decrease indent' global insert <s-tab> '<a-;><lt>'
map -docstring 'Decrease indent or erase character before cursor' global insert <backspace> '<a-;>: decrease-indent-or-erase-character-before-cursor<ret>'

# Insert various characters.
# Heavily based on qwerty-lafayette.
# https://qwerty-lafayette.org
# See also “Vim digraphs” for defaults.
# https://vimhelp.org/digraph.txt.html#digraphs-default
declare-user-mode digraphs
define-command -hidden insert_text -params 1 %{
  evaluate-commands -save-regs '"' %{
    set-register '"' %arg{1}
    execute-keys -draft ';P'
  }
}
map -docstring 'erase characters before cursor to line begin' global insert <c-u> ''
map -docstring 'enter digraphs mode' global insert <c-k> '<a-;>:enter-user-mode digraphs<ret>'
map -docstring 'â' global digraphs 'q' ':insert_text â<ret>'
map -docstring 'é' global digraphs 'w' ':insert_text é<ret>'
map -docstring 'É' global digraphs 'W' ':insert_text É<ret>'
map -docstring 'è' global digraphs 'e' ':insert_text è<ret>'
map -docstring 'ë' global digraphs 'E' ':insert_text ë<ret>'
map -docstring 'ê' global digraphs 'r' ':insert_text ê<ret>'
map -docstring 'ù' global digraphs 'u' ':insert_text ù<ret>'
map -docstring 'û' global digraphs 'U' ':insert_text û<ret>'
map -docstring 'î' global digraphs 'i' ':insert_text î<ret>'
map -docstring 'ï' global digraphs 'I' ':insert_text ï<ret>'
map -docstring 'ô' global digraphs 'o' ':insert_text ô<ret>'
map -docstring 'ê' global digraphs '[' ':insert_text ê<ret>'
map -docstring 'ë' global digraphs ']' ':insert_text ë<ret>'
map -docstring '«' global digraphs '{' ':insert_text «<ret>'
map -docstring '»' global digraphs '}' ':insert_text »<ret>'
map -docstring 'à' global digraphs 'a' ':insert_text à<ret>'
map -docstring 'À' global digraphs 'A' ':insert_text À<ret>'
map -docstring 'â' global digraphs 's' ':insert_text â<ret>'
map -docstring 'ç' global digraphs 'c' ':insert_text ç<ret>'
map -docstring 'Ç' global digraphs 'C' ':insert_text Ç<ret>'
map -docstring 'æ' global digraphs 'z' ':insert_text æ<ret>'
map -docstring 'œ' global digraphs 'x' ':insert_text œ<ret>'
map -docstring '…' global digraphs '.' ':insert_text …<ret>'
map -docstring '’' global digraphs '<space>' ':insert_text ’<ret>'
map -docstring '“' global digraphs '<lt>' ':insert_text “<ret>'
map -docstring '”' global digraphs '<gt>' ':insert_text ”<ret>'
map -docstring '—' global digraphs '<minus>' ':insert_text —<ret>'
map -docstring '–' global digraphs '_' ':insert_text –<ret>'

# Text objects
# Quotation marks
map -docstring 'double quotation mark' global object <a-Q> 'c“,”<ret>'
map -docstring 'single quotation mark' global object <a-q> 'c‘,’<ret>'
map -docstring 'double angle quotation mark' global object <a-G> 'c«,»<ret>'
map -docstring 'single angle quotation mark' global object <a-g> 'c‹,›<ret>'
# Tag
map -docstring 'tag' global object t 'c<lt>.+?<gt>,<lt>/.+?<gt><ret>'
# Line
map -docstring 'line' global object x '<esc>x_'

# Extended next and previous pairs
map global normal <ret> ':'
map global normal f '<a-:>F'
map global normal F '<a-:><a-;><a-F>'
map global normal t '<a-:>T'
map global normal T '<a-:><a-;><a-T>'
# map global normal / '<a-:>?'
# map global normal ? '<a-:><a-;><a-?>'
# map global normal n '<a-:>?<ret>'
# map global normal N '<a-:><a-;><a-?><ret>'
map global normal x ': select-or-extend-lines<ret>'
map global normal X 'x<a-:><a-;>'
map global normal { '<a-:><a-;>{p'
map global normal } '<a-:>}p'
define-command select-or-extend-lines %{
  execute-keys '<a-:>'
  try %{
    # At least one selection is not full, so select whole lines.
    execute-keys -draft '<a-K>\A^.*\n\z<ret>'
    execute-keys 'x'
  } catch %{
    execute-keys 'Jx'
  }
}

# Normal mode ------------------------------------------------------------------

# Hot reloading
# map -docstring 'reload kakrc' global user <F5> ': source "%val{runtime}/kakrc"; echo reloaded kakrc<ret>'

# Enter command mode
map -docstring 'enter command mode' global normal <ret> :

# Re-center view
# map -docstring 'scroll to put the cursor on the top line of the window' global user , vtvm

# Editing
# map -docstring 'save file' global normal <c-s> ': write; echo -markup ''{Information}file saved''<ret>'
# map -docstring 'close client' global normal <c-q> ': quit<ret>'
# map -docstring 'close buffer' global normal <c-w> ': delete-buffer; echo -markup ''{Information}buffer closed''<ret>'

# Navigation
# map -docstring 'scroll one page up' global normal <pageup> ,<pageup>
# map -docstring 'scroll one page down' global normal <pagedown> ,<pagedown>
# map -docstring 'move to previous paragraph' global normal [ ,gh[pgi
# map -docstring 'move to next paragraph' global normal ] ,]plgi

# Selection primitives
# map -docstring 'enter select mode' global normal s ': enter-select-mode<ret>'

# User mode --------------------------------------------------------------------

# Formatting and parsing date-time
# Format date as “1991-11-02 Sat”.
map -docstring 'format date to 2006-01-02' global user d '| date -d "$kak_selection" ''+%F''<ret>'
map -docstring 'format date to 2006-01-02 Mon' global user D '| date -d "$kak_selection" ''+%F %a''<ret>'
map -docstring 'sanitize text input' global user @ '| iconv -f UTF-8 -t ASCII//TRANSLIT//IGNORE<ret>'

# Show the Unicode value under the cursor.
map -docstring 'Unicode' global user u ': echo -markup "{Information}U+%sh{printf ''%04x'' ""$kak_cursor_char_value""}"<ret>'

# Add search flags
map global prompt <a-i> '<home>(?i)<end>'
map global prompt <a-o> '<home>(?S)<end>'

# Goto mode --------------------------------------------------------------------

# ------------------------------------------------------------------------------

# Commands ---------------------------------------------------------------------

define-command -hidden enter_lsp_mode %{
  enter-user-mode lsp
}

define-command -hidden select_next_surrounding_object -params 1 %{
  execute-keys "f%arg{1}<a-a>%arg{1}"
}

define-command -hidden select_previous_surrounding_object -params 1 %{
  execute-keys "<a-f>%arg{1}h<a-a>%arg{1}"
}

define-command -hidden swap_buffer_in_viewport -params 1 %{
  execute-keys '"sZ'
  execute-keys -client %arg{1} '"tZ'
  execute-keys '"tz<esc>'
  execute-keys -client %arg{1} '"sz<esc>'
}

# Prompt commands --------------------------------------------------------------

define-command -hidden show_definition_preview_hover %{
  lsp-hover
}

define-command -hidden open_buffer_picker %{
  prompt open: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_document_symbol_picker %{
  lsp-goto-document-symbol
}

define-command -hidden open_file_picker %{
  prompt open: -menu -shell-script-candidates 'fd --hidden --type=file' %{
    edit -existing %val{text}
  }
}

define-command -hidden open_global_search_prompt %{
  prompt global_search: -shell-script-candidates %{
    echo "write $kak_quoted_response_fifo" > "$kak_command_fifo"
    tr -sc '[:alnum:]' '\n' < "$kak_response_fifo"
  } %{
    open_buffer_with_output "%val{text}.refs" rg --hidden --column -- %val{text}
  }
}

define-command -hidden open_viewport_picker %{
  prompt -menu viewport_picker: -client-completion %{
    swap_buffer_in_viewport %val{text}
  }
}

define-command -hidden open_workspace_symbol_picker %{
  lsp-workspace-symbol-incr
}

define-command -hidden prompt_select_next_surrounding_object %{
  on-key %{
    select_next_surrounding_object %val{key}
  }
}

define-command -hidden prompt_select_previous_surrounding_object %{
  on-key %{
    select_previous_surrounding_object %val{key}
  }
}

define-command -hidden yank_selected_text_to_terminal_clipboard %{
  nop %sh{
    printf 'echo -to-file %%(%s) -- "%%val{selections}"' "$kak_response_fifo" > "$kak_command_fifo"
    {
      printf '\033]52;c;'
      tr '\0' '\n' < "$kak_response_fifo" | sed 's/\\\\/\\/g' | base64
      printf '\a'
    } > /dev/tty
  }
}

# Mappings ---------------------------------------------------------------------

map -docstring 'enter surround mode' global normal q ':enter_surround_mode<ret>'
map -docstring 'select previous surrounding object' global normal [ ':prompt_select_previous_surrounding_object<ret>'
map -docstring 'select next surrounding object' global normal ] ':prompt_select_next_surrounding_object<ret>'
map -docstring 'open file picker' global user f ':open_file_picker<ret>'
map -docstring 'open buffer picker' global user b ':open_buffer_picker<ret>'
map -docstring 'open global search prompt' global user / ':open_global_search_prompt<ret>'
map -docstring 'open viewport picker' global user v ':open_viewport_picker<ret>'
map -docstring 'open document symbol picker' global user s ':open_document_symbol_picker<ret>'
map -docstring 'open workspace symbol picker' global user S ':open_workspace_symbol_picker<ret>'
map -docstring 'show definition preview hover' global user k ':show_definition_preview_hover<ret>'
map -docstring 'enter lsp mode' global user l ':enter_lsp_mode<ret>'
map -docstring 'yank selected text to the terminal clipboard' global user y ':yank_selected_text_to_terminal_clipboard<ret>'
map -docstring 'find friendly session name' global user R ':find_friendly_session_name<ret>'

# Language support -------------------------------------------------------------

# ------------------------------------------------------------------------------

# Vim-like unimpaired mappings
declare-user-mode unimpaired_left
declare-user-mode unimpaired_right
map -docstring 'unimpaired_left' global user '[' ': enter-user-mode unimpaired_left<ret>'
map -docstring 'unimpaired_right' global user ']' ': enter-user-mode unimpaired_right<ret>'
map -docstring 'read-only' global unimpaired_left r ': set-option buffer readonly yes<ret>'
map -docstring 'read-only' global unimpaired_right r ': set-option buffer readonly no<ret>'
map -docstring 'render whitespace' global unimpaired_left w ': remove-highlighter global/whitespace<ret>'
map -docstring 'render whitespace' global unimpaired_right w ': add-highlighter global/whitespace show-whitespaces<ret>'
map -docstring 'rulers' global unimpaired_left r ': remove-highlighter global/rulers<ret>'
map -docstring 'rulers' global unimpaired_right r ': add-highlighter global/rulers column 81 default,cyan<ret>'

# Commands ---------------------------------------------------------------------

map -docstring 'erase character before cursor' global normal <backspace> ': erase-character-before-cursor<ret>'
map -docstring 'erase character under cursor' global normal <del> ': erase-character-under-cursor<ret>'

map -docstring 'select next word' global normal w ': select-next-word<ret>'

map -docstring 'move line down' global normal <a-down> ': move-lines-down<ret>'
map -docstring 'move line up' global normal <a-up> ': move-lines-up<ret>'

map -docstring 'select all occurrences of current selection' global normal <a-percent> ': select-highlights<ret>'

map -docstring 'increment selection' global normal <c-a> ': increment-selection %val{count}<ret>'
map -docstring 'decrement selection' global normal <c-x> ': decrement-selection %val{count}<ret>'

map -docstring 'buffer directory' global prompt <a-/> '%sh{dirname "$kak_bufname"}<a-!>/'

# Commands ─────────────────────────────────────────────────────────────────────

define-command erase-character-before-cursor -docstring 'erase character before cursor' %{
  execute-keys -draft ';i<backspace>'
}

define-command erase-character-under-cursor -docstring 'erase character under cursor' %{
  execute-keys -draft ';i<del>'
}

define-command select-next-word -docstring 'select next word' %{
  evaluate-commands -itersel %{
    hook -group select-next-word -always -once window User "%val{selection_desc}" %{
      search-next-word
    }
    try %{
      execute-keys '<a-i>w'
      trigger-user-hook "%val{selection_desc}"
    } catch %{
      search-next-word
    }
    remove-hooks window select-next-word
  }
}

define-command -hidden search-next-word -docstring 'search next word' %{
  execute-keys 'h/\W\w<ret><a-i>w'
}

# Reference: https://code.visualstudio.com/docs/getstarted/keybindings#_basic-editing
define-command move-lines-down -docstring 'move line down' %{
  execute-keys -draft 'x<a-_><a-:>Z;ezjxdzP'
}

define-command move-lines-up -docstring 'move line up' %{
  execute-keys -draft 'x<a-_><a-:><a-;>Z;bzkxdzp'
}

define-command select-highlights -docstring 'select all occurrences of current selection' %{
  execute-keys '"aZ*%s<ret>"bZ"az"b<a-z>a'
}

define-command increment-selection -params 1 -docstring 'increment-selection <count>: increment selection by count' %{
  execute-keys "a+%sh{expr $1 '|' 1}<esc>|{ cat; echo; } | bc<ret>"
}

define-command decrement-selection -params 1 -docstring 'decrement-selection <count>: decrement selection by count' %{
  execute-keys "a-%sh{expr $1 '|' 1}<esc>|{ cat; echo; } | bc<ret>"
}

define-command -hidden evaluate_selected_text %{
  evaluate-commands -itersel %{
    evaluate-commands %val{selection}
  }
}

alias global = evaluate_selected_text

# Surround selections
# Reference: https://github.com/mawww/kakoune/blob/master/src/normal.cc#:~:text=select_object

define-command -hidden find_friendly_session_name %{
  rename-session %sh{
    curl 'https://myanimelist.net/character.php?limit=[0-1000:50]' |
    kak -f '1shttps://myanimelist.net/character/\d+/(\w+)<ret>y%<a-R>a<ret>' |
    shuf -n 1
  }
}

define-command open_visual_studio_code %{
  nop %sh{
    code --goto "$kak_buffile:$kak_line:$kak_column"
  }
}

define-command alacritty-open-new-client -params .. %{
  nop %sh{
    alacritty msg create-window -e kak -c "$kak_session" -e "$*"
  }
}

complete-command alacritty-open-new-client command

define-command foot-open-new-client -params .. %{
  nop %sh{
    footclient -e kak -c "$kak_session" -e "$*"
  }
}

define-command foot_open_helix -params .. %{
  nop %sh{
    footclient -e hx "$kak_buffile:$kak_line:$kak_column"
  }
}

complete-command foot-open-new-client command

define-command mkdir -docstring 'make directory for the current buffer' %{
  nop %sh(mkdir -p -- "$(dirname -- "$kak_buffile")")
}

# Terminal integration
hook -group alacritty-detection global ClientCreate '.*' %{
  trigger-user-hook "TERM=%val{client_env_TERM}"
}

# Alacritty terminal detection
hook -group alacritty-integration global User 'TERM=alacritty' %{
  alias global open-new-client alacritty-open-new-client
}

# foot terminal detection
hook -group alacritty-integration global User 'TERM=foot' %{
  alias global open-new-client foot-open-new-client
}

define-command open-kakrc -docstring 'open kakrc' %{
  edit "%val{config}/kakrc"
}

define-command open-config -params 1 -docstring 'open from %val{config}' %{
  edit "%val{config}/%arg{1}"
}

complete-command -menu open-config shell-script-candidates %{
  cd "$kak_config" && find -L . -type f | sort -u
}

define-command open-runtime -params 1 -docstring 'open from %val{runtime}' %{
  edit "%val{runtime}/%arg{1}"
}

complete-command -menu open-config shell-script-candidates %{
  cd "$kak_runtime" && find -L . -type f | sort -u
}

# Show Unicode value in the status line.
define-command get_character_info %{
  echo %sh{printf 'U+%04x' "$kak_cursor_char_value"}
}

# Language support -------------------------------------------------------------

# Indentation
set-option global tabstop 4
set-option global indentwidth 2
set-option global disabled_hooks '.+-trim-indent|.+-insert|.+-indent'

# Kakoune
# https://kakoune.org
hook -group config global BufSetOption filetype=kak %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '#'
}

# Crystal
# https://crystal-lang.org
hook -group config global BufSetOption filetype=crystal %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '#'
}

# JavaScript
# https://developer.mozilla.org/en-US/docs/Web/JavaScript
hook -group config global BufSetOption filetype=javascript %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '//'
  set-option buffer block_comment_tokens '/*' '*/'
}

# Lua
# https://lua.org
hook -group config global BufSetOption filetype=lua %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '--'
  set-option buffer block_comment_tokens '[[--' '--]]'
}

# Makefile
# https://en.wikipedia.org/wiki/Make_(software)#Makefile
hook -group config global BufSetOption filetype=makefile %{
  set-option buffer indentwidth 0
  set-option buffer line_comment_token '#'
}

# grep
# https://en.wikipedia.org/wiki/Grep
hook -group config global BufSetOption filetype=grep %{
  map buffer normal <ret> ': grep-jump<ret>'
}

# Detection --------------------------------------------------------------------

hook -group config global BufCreate '.*/\.kakrc' %{
  set-option buffer filetype kak
}

hook -group config global BufCreate '.*/(profile|bashrc|tmux.conf)' %{
  set-option buffer filetype sh
}

# Mark

# Iterate selections one by one with `Control+N` and `Control+P`.

# Save selections with `Y` or its strong version `Alt+Y` (same as `Y Space`).

# Clear registers with `D`.  You can specify the register to use.  For example, `"/D` to clear the search register.

# Restore registers as selections with `z` or its strong version `Z` (same as `zD`).

# You can specify the register to use for all commands.

# == Commands

# - `z` ⇒ Restore register.
# - `Z` ⇒ Consume register.

# - `D` ⇒ Clear register.

# - `Y` ⇒ Add selections.
# - `Alt+Y` ⇒ Consume selections.

# - `Control+N` ⇒ Iterate next selection.
# - `Control+P` ⇒ Iterate previous selection.

# == Faces

# - `MarkedPrimaryCursor`
# - `MarkedPrimarySelection`

# - `MarkedSecondaryCursor`
# - `MarkedSecondarySelection`
# Options ──────────────────────────────────────────────────────────────────────

# Internal variables
declare-option -hidden range-specs mark_ranges

# Faces
set-face global MarkedPrimaryCursor '+ub'
set-face global MarkedPrimarySelection '+ub'
set-face global MarkedSecondaryCursor '+u'
set-face global MarkedSecondarySelection '+u'

# Mappings ─────────────────────────────────────────────────────────────────────

map -docstring 'restore register' global normal z ': restore-register %val{register}<ret>'
map -docstring 'consume register' global normal Z ': consume-register %val{register}<ret>'

map -docstring 'clear register' global normal D ': clear-register %val{register}<ret>'

map -docstring 'add selections' global normal Y ': add-selections %val{register}<ret>'
map -docstring 'consume selections' global normal <a-Y> ': consume-selections %val{register}<ret>'

map -docstring 'iterate next selection' global normal <c-n> ': iterate-next-selection %val{register}<ret>'
map -docstring 'iterate previous selection' global normal <c-p> ': iterate-previous-selection %val{register}<ret>'

# Commands ─────────────────────────────────────────────────────────────────────

define-command restore_register -params 1 -docstring 'restore-register <register>: restore register (default: ^)' %{
  try %[ execute-keys """%arg{1}z" ]
}

define-command consume_register -params 1 -docstring 'consume-register <register>: consume register (default: ^)' %{
  restore_register %arg{1}
  clear_register %arg{1}
}

define-command clear_register -params 1 -docstring 'clear-register <register>: clear register (default: ^)' %{
  # Handle null named register.
  try %{
    set-register %arg{1}
    echo -markup "{Information}cleared register '%arg{1}'{Default}"
  } catch %{
    set-register '^'
    echo -markup "{Information}cleared register '^'{Default}"
  }
}

define-command restore_selections -params 1 -docstring 'restore-selections <register>: restore selections (default: ^)' %{
  try %[ execute-keys """%arg{1}<a-z>a" ]
}

define-command save_selections -params 1 -docstring 'save-selections <register>: save selections (default: ^)' %{
  execute-keys -save-regs '' """%arg{1}Z"
}

define-command add_selections -params 1 -docstring 'add-selections <register>: add selections (default: ^)' %{
  evaluate-commands -draft consume-selections %arg{1}
  # Display saved selections:
  # Handle null named register.
  try %{
    execute-keys -save-regs %arg{1} """%arg{1}Z"
  } catch %{
    execute-keys Z
  }
}

define-command consume_selections -params 1 -docstring 'consume-selections <register>: consume selections (default: ^)' %{
  restore_selections %arg{1}
  save_selections %arg{1}
  execute-keys ','
}

define-command iterate_next_selection -params 1 -docstring 'iterate-next-selection <register>: iterate next selection (default: ^)' %{
  restore_register %arg{1}
  execute-keys ')'
  consume_selections %arg{1}
}

define-command iterate_previous_selection -params 1 -docstring 'iterate-previous-selection <register>: iterate previous selection (default: ^)' %{
  restore_register %arg{1}
  execute-keys '('
  consume_selections %arg{1}
}

# Highlighters ─────────────────────────────────────────────────────────────────

define-command -hidden update_mark_ranges %{
  # Reset ranges
  evaluate-commands -buffer '*' unset-option buffer mark_ranges
  try %{
    evaluate-commands -draft %{
      # Jump to the buffer
      execute-keys 'z'
      # Initialize ranges
      set-option buffer mark_ranges %val{timestamp}
      # Mark the main selection
      evaluate-commands -draft %{
        execute-keys ','
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedPrimarySelection"
        execute-keys ';'
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedPrimaryCursor"
      }
      # Mark other selections
      execute-keys '<a-,>'
      evaluate-commands -draft -itersel %{
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedSecondarySelection"
        execute-keys ';'
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedSecondaryCursor"
      }
    }
  }
}

add-highlighter global/marks ranges mark_ranges
hook -group show-marks -always global RegisterModified '\^' update_mark_ranges
update_mark_ranges

# Notes ------------------------------------------------------------------------

hook -group config global BufCreate '.*/docs/notes.txt' %{
  set-option buffer filetype notes
}

hook -group config global BufSetOption filetype=notes %{
  add-highlighter buffer/notes ref notes
  # Insert date-time as “1991-11-02 Sat 10:52”.
  map -docstring 'insert date (2006-01-02 Mon)' buffer insert <c-u> '<a-;>;<a-;>!date ''+%F %a'' | tr -d ''\n''<ret><right>'
  map -docstring 'insert date (2006-01-02 Mon 15:04)' buffer insert <c-i> '<a-;>;<a-;>!date ''+%F %a %H:%M'' | tr -d ''\n''<ret><right>'
}

add-highlighter shared/notes regions
add-highlighter shared/notes/text default-region group
add-highlighter shared/notes/text/entry-date-year regex '^\d{4}' 0:comment
add-highlighter shared/notes/text/entry-date-year-month regex '^\d{4}-\d{2}' 0:comment
add-highlighter shared/notes/text/entry-date regex '^\d{4}-\d{2}-\d{2} \w{3}' 0:comment
add-highlighter shared/notes/text/entry-date-time regex '^\d{4}-\d{2}-\d{2} \w{3} \d{2}:\d{2}' 0:comment
add-highlighter shared/notes/text/keyword regex '\b(Buy|Go on|Go to|Read|Sign up|Update|Watch)\b' 0:keyword
add-highlighter shared/notes/text/url regex 'https?://\S+' 0:link
add-highlighter shared/notes/info region -recurse '\(' '\(' '\)' group
add-highlighter shared/notes/info/content fill string
add-highlighter shared/notes/info/url ref notes/text/url
add-highlighter shared/notes/info/delimiters regex '(?<opening>.).+(?<closing>.)' opening:string closing:string
add-highlighter shared/notes/tag region -recurse '\[' '\[' '\]' fill meta

# List -------------------------------------------------------------------------

hook -group config global BufCreate '.*/list.txt' %{
  set-option buffer filetype list
}

hook -group config global BufSetOption filetype=list %{
  add-highlighter buffer/list ref list
}

add-highlighter shared/list regions
add-highlighter shared/list/text default-region group
add-highlighter shared/list/text/number regex '\b\d{2}\b' 0:value
add-highlighter shared/list/text/date regex '\b\d{4}-\d{2}-\d{2}\b' 0:string
add-highlighter shared/list/text/year regex '\b\d{4}\b' 0:string
add-highlighter shared/list/text/keyword regex '\b(Movie|Special)\b' 0:keyword
add-highlighter shared/list/text/url regex 'https?://\S+' 0:link

# Pipe selections as JSON Lines to work with traditional Unix tools.
#
# JSON Lines
# https://jsonlines.org
#
# Why Kakoune — A better unix citizen
# https://kakoune.org/why-kakoune/why-kakoune.html#_a_better_unix_citizen

# Mappings ─────────────────────────────────────────────────────────────────────

map -docstring 'pipe (jsonl)' global user | ': pipe-selections-as-jsonl-prompt<ret>'

# Commands ─────────────────────────────────────────────────────────────────────

define-command pipe-selections-as-jsonl-prompt -docstring 'pipe selections as JSON Lines' %{
  prompt 'pipe (jsonl):' -shell-completion %{
    pipe-selections-as-jsonl %val{text}
  }
}

define-command pipe-selections-as-jsonl -params 1.. -docstring 'pipe-selections-as-jsonl <command> [arguments]: pipe selections as JSON Lines' %{
  evaluate-commands -save-regs '"' %sh{
    # Path to selections as JSON Lines
    selections_path=$(mktemp)

    # Cleanup temporary files
    trap at_exit EXIT
    at_exit() {
      rm -f "$selections_path"
    }

    # Terminates execution immediately, printing message to Kakoune.
    abort() {
      echo "fail $1"
      exit 1
    }

    # Serialize (Shell → JSON Lines) and run the shell command.
    shell_command=$@
    eval set -- "$kak_quoted_selections"
    jq --null-input '$ARGS.positional[]' --args -- "$@" |
    sh -c "$shell_command" > "$selections_path"

    # Abort with non-zero exit status
    [ $? = 0 ] || abort "pipe exit status: $?"

    # Validate the command output
    jq --exit-status --slurp 'all(type == "string")' "$selections_path" > /dev/null || abort "selections are not JSON Lines"

    # Serialize (JSON Lines → Kakoune) and set the selections.
    export squote="'"
    jq --slurp --raw-output '["set-register", "dquote"] + map(env.squote + gsub(env.squote; env.squote + env.squote) + env.squote) | join(" ")' "$selections_path"
    echo execute-keys R
  }
}

hook -group c-configuration global BufSetOption filetype=c %{
  set-option buffer line_comment_token '//'
  set-option buffer block_comment_tokens '/*' '*/'
  set-option buffer indentation_rules_increase_indent_pattern ''
  set-option buffer indentation_rules_decrease_indent_pattern ''
}

# Git
# Mappings
map -docstring 'Toggle comments' global normal '#' ': toggle-comments<ret>'
# == Faces
# Whitespace characters:
# - `Tab` ⇒ `WhitespaceError`
# - `Newline` ⇒ `Whitespace`
# - `NonBreakingSpace` ⇒ `WhitespaceError`
# - `Indent` ⇒ `Whitespace`
# - `MixedIndent` ⇒ `WhitespaceError`
# - `OddIndent` ⇒ `WhitespaceError`
# Extra whitespace:
# - `TrailingWhitespace` ⇒ `WhitespaceError`
# - `ConsecutiveWhitespace` ⇒ `WhitespaceWarning`
# Generic faces:
# - `WhitespaceRuler` ⇒ `green+fu`
# - `WhitespaceError` ⇒ `red+fc`
# - `WhitespaceWarning` ⇒ `red+fc`
# add-highlighter global/whitespace ref whitespace
# * Individual faces for whitespace (tabs, newlines, non-breaking-spaces) and indent.
# * Show whitespace oddities:
# ** Trailing whitespace (only shown when not in insert mode).
# ** Odd and mixed indent.
# * Show consecutive whitespace.
# * Show limit of 80 characters (useful for horizontal lines).
# add-highlighter global/whitespace ref whitespace
# Refined show whitespace

# Faces ────────────────────────────────────────────────────────────────────────

# Whitespace characters:
set-face global Tab WhitespaceError
set-face global Newline Whitespace
set-face global NonBreakingSpace WhitespaceError

# Indentation rules:
set-face global Indent Whitespace
set-face global MixedIndent WhitespaceError
set-face global OddIndent WhitespaceError

# Extra whitespace:
set-face global TrailingWhitespace WhitespaceError
set-face global ConsecutiveWhitespace WhitespaceWarning

# Generic faces:
set-face global WhitespaceRuler 'green+fu'
set-face global WhitespaceError 'red+fc'
set-face global WhitespaceWarning 'red+fc'

# Hooks ────────────────────────────────────────────────────────────────────────

# Only shown when not in insert mode.
remove-hooks global whitespace
hook -group whitespace -always global ModeChange 'push:normal:insert' %{
  set-face window TrailingWhitespace Whitespace
  set-face window ConsecutiveWhitespace Whitespace

  # Restore
  hook -always -once window ModeChange 'pop:insert:normal' %{
    unset-face window TrailingWhitespace
    unset-face window ConsecutiveWhitespace
  }
}

# Highlighters ─────────────────────────────────────────────────────────────────

# Order matters:
#
# “You can think of highlighters as like a list of painting instructions.” — Screwtape
#
add-highlighter shared/whitespace group

# Show whitespace (tabs, newlines, non-breaking-spaces).
add-highlighter shared/whitespace/tab regex '\t+' '0:Tab'
add-highlighter shared/whitespace/newline regex '\n+' '0:Newline'
add-highlighter shared/whitespace/non-breaking-space regex ' +' '0:NonBreakingSpace'

# Show consecutive whitespace, then paint over indent.
add-highlighter shared/whitespace/consecutive-whitespace regex '\h{2,}' '0:ConsecutiveWhitespace'
add-highlighter shared/whitespace/indent regex '^\h+' '0:Indent'

# Show trailing whitespace.
add-highlighter shared/whitespace/trailing-whitespace regex '\h+$' '0:TrailingWhitespace'

# Show odd and mixed indent.
add-highlighter shared/whitespace/odd-indent regex '^( {1}| {3}| {5}| {7}| {9}| {11}| {13}| {15}| {17}| {19})(?=\H)' '0:OddIndent'
add-highlighter shared/whitespace/mixed-indent regex '^(\t+ | +\t)\h*' '0:MixedIndent'

# Show limit of 80 characters.
add-highlighter shared/whitespace/ruler regex '(?S)^.{80}$\K\n' '0:WhitespaceRuler'

# Sensible
# Enter `search` and start typing to search.
# Press `Tab` to skim through the occurrences.
# Show search with `show-search` or enter search mode then `Escape`.

# Options ──────────────────────────────────────────────────────────────────────

# Sensible scroll-off: 5 lines and 1 column.
# Initialization
# Highlighters

# set-face global LineNumberSelected red
# offscreen
# hidden
# MultipleSelections
# set-face global insert green
# set-face global selection blue

# Commands ─────────────────────────────────────────────────────────────────────

# Faces
set-face global Search 'black,yellow'
add-highlighter shared/search dynregex '%reg{/}' 0:Search

hook -group show-search -always global NormalKey '/|<a-/>|\?|<a-\?>' %{
  add-highlighter window/search ref search
  hook -always -once window ModeChange 'pop:prompt:normal' %{
    remove-highlighter window/search
    # remove-highlighter window/wrap
  }
}

hook -group show-search global RegisterModified '/' %{
  try %{
    add-highlighter shared/search regex "%reg{/}" 0:Search
  } catch %{
    remove-highlighter shared/search
  }
}

# Internal variables
declare-option -hidden range-specs selected_text_ranges

set-face global Search black,yellow+fg
set-face global SelectedText black,blue+fg

define-command -hidden update-selected-text-ranges %{
  # Reset ranges
  unset-option window selected_text_ranges
  try %{
    evaluate-commands -draft -save-regs '^' %{
      execute-keys '<a-k>..<ret>'
      execute-keys '<a-K>\A\h+\z<ret>'
      # Initialize ranges
      set-option window selected_text_ranges %val{timestamp}
      # Mark the main selection
      # Mark other selections
      evaluate-commands -draft %{
        execute-keys '*%s<ret>'
        evaluate-commands -itersel %{
          set-option -add window selected_text_ranges "%val{selection_desc}|SelectedText"
        }
      }
      evaluate-commands -itersel %{
        set-option -remove window selected_text_ranges "%val{selection_desc}|SelectedText"
      }
    }
  }
}

# Initialization
add-highlighter global/selected-text ranges selected_text_ranges
remove-hooks global show-selected-text
hook -group show-selected-text -always global NormalIdle '' update-selected-text-ranges
hook -group show-selected-text -always global InsertIdle '' update-selected-text-ranges

# Detection
# ‾‾‾‾‾‾‾‾‾

hook global BufCreate .*/?(?i)sql %{
    set-option buffer filetype sql
}

# Initialization
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=sql %{
    require-module sql
    set-option window static_words %opt{sql_static_words}
}

hook -group sql-highlight global WinSetOption filetype=sql %{
    add-highlighter window/sql ref sql
    hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/sql }
}


provide-module sql %{

# Highlighters
# ‾‾‾‾‾‾‾‾‾‾‾‾

add-highlighter shared/sql regions
add-highlighter shared/sql/code default-region group
add-highlighter shared/sql/double_string region '"' (?<!\\)(\\\\)*" fill string
add-highlighter shared/sql/single_string region "'" (?<!\\)(\\\\)*' fill string
add-highlighter shared/sql/comment1 region '--' '$' fill comment
add-highlighter shared/sql/comment2 region '#' '$' fill comment
add-highlighter shared/sql/comment3 region '/\*' '\*/' fill comment

evaluate-commands %sh{
    # Keywords
    keywords="ALTER|AS|ASC|AUTO_INCREMENT|CHECK|CONSTRAINT|CREATE|DATABASE|DEFAULT|DELETE|DESC|DISTINCT|DROP"
    keywords="${keywords}|EXISTS|FOREIGN KEY|FROM|FULL JOIN|FULL OUTER JOIN|GROUP BY|HAVING|INDEX|INNER JOIN"
    keywords="${keywords}|INSERT INTO|INTO|JOIN|LEFT JOIN|LEFT OUTER JOIN|LIMIT|MODIFY|NOT NULL|ON|ORDER BY|PRIMARY KEY"
    keywords="${keywords}|REFERENCES|RIGHT JOIN|RIGHT OUTER JOIN|SELECT|SELECT TOP|SET|TABLE|TRUNCATE|UNION|UNIQUE"
    keywords="${keywords}|UPDATE|VALUES|VIEW|WHERE"

    # Operators
    operators="ALL|AND|ANY|BETWEEN|EXISTS|IN|IS|LIKE|NOT|OR|SOME"

    # MySQL functions
    functions="ABS|ACOS|ADDDATE|ADDTIME|ASCII|ASIN|ATAN|AVG|BIN|BINARY|CASE|CAST|CEIL|CEILING"
    functions="${functions}|CHARACTER_LENGTH|CHAR_LENGTH|COALESCE|CONCAT|CONCAT_WS|CONNECTION_ID|CONV|CONVERT"
    functions="${functions}|COS|COT|COUNT|CURDATE|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER"
    functions="${functions}|CURTIME|DATABASE|DATE|DATE_ADD|DATEDIFF|DATE_FORMAT|DATE_SUB|DAY|DAYNAME"
    functions="${functions}|DAYOFMONTH|DAYOFWEEK|DAYOFYEAR|DEGREES|DIV|EXP|EXTRACT|FIELD|FIND_IN_SET|FLOOR"
    functions="${functions}|FORMAT|FROM_DAYS|GREATEST|HOUR|IF|IFNULL|INSERT|INSTR|ISNULL|LAST_DAY"
    functions="${functions}|LAST_INSERT_ID|LCASE|LEAST|LEFT|LENGTH|LN|LOCALTIME|LOCALTIMESTAMP|LOCATE|LOG"
    functions="${functions}|LOWER|LPAD|LTRIM|MAKEDATE|MAKETIME|MAX|MICROSECOND|MID|MIN|MINUTE|MOD|MONTH"
    functions="${functions}|MONTHNAME|NOW|NULLIF|PERIOD_ADD|PERIOD_DIFF|PI|POSITION|POW|POWER|QUARTER|RADIANS"
    functions="${functions}|RAND|REPEAT|REPLACE|REVERSE|RIGHT|ROUND|RPAD|RTRIM|SECOND|SEC_TO_TIME|SESSION_USER"
    functions="${functions}|SIGN|SIN|SPACE|SQRT|STRCMP|STR_TO_DATE|SUBDATE|SUBSTR|SUBSTRING|SUBSTRING_INDEX"
    functions="${functions}|SUBTIME|SUM|SYSDATE|SYSTEM_USER|TAN|TIME|TIMEDIFF|TIME_FORMAT|TIMESTAMP"
    functions="${functions}|TIME_TO_SEC|TO_DAYS|TRIM|TRUNCATE|UCASE|UPPER|USER|VERSION|WEEK|WEEKDAY|WEEKOFYEAR"
    functions="${functions}|YEAR|YEARWEEK"

    # SQL Server functions
    functions="${functions}|CHAR|CHARINDEX|DATALENGTH|DATEADD|DATENAME|DATEPART|GETDATE|GETUTCDATE|ISDATE"
    functions="${functions}|ISNUMERIC|LEN|NCHAR|PATINDEX|SESSIONPROPERTY|STR|STUFF|USER_NAME"

    # MS Access functions
    functions="${functions}|Abs|Asc|Atn|Avg|Chr|Cos|Count|CurDir|CurrentUser|Date|DateAdd|DateDiff|DatePart"
    functions="${functions}|DateSerial|DateValue|Day|Environ|Exp|Fix|Format|Hour|InStr|InstrRev|Int|IsDate"
    functions="${functions}|IsNull|IsNumeric|LCase|Left|Len|LTrim|Max|Mid|Min|Minute|Month|MonthName|Now"
    functions="${functions}|Randomize|Replace|Right|Rnd|Round|RTrim|Second|Sgn|Space|Split|Sqr|Str|StrComp"
    functions="${functions}|StrConv|StrReverse|Sum|Time|TimeSerial|TimeValue|Trim|UCase|Val|Weekday"
    functions="${functions}|WeekdayName|Year"

    # Oracle functions
    functions="${functions}|ADD_MONTHS|ASCIISTR|BITAND|CHR|COMPOSE|COSH|DBTIMEZONE|DECOMPOSE|DUMP|INITCAP|INSTRB"
    functions="${functions}|INSTRC|LENGTHB|LENGTHC|MEDIAN|MONTHS_BETWEEN|NCHR|NEW_TIME|NEXT_DAY|REGEXP_COUNT"
    functions="${functions}|REGEXP_INSTR|REGEXP_REPLACE|REGEXP_SUBSTR|REMAINDER|ROWNUM|SESSIONTIMEZONE|SOUNDEX"
    functions="${functions}|SYSTIMESTAMP|TANH|TRANSLATE|TRUNC|TZ_OFFSET|VSIZE"

    # MySQL data types
    data_types="LONGBLOB|LONGTEXT|MEDIUMBLOB|MEDIUMTEXT|SET|TEXT|TINYTEXT"
    data_types_fn="BIGINT|BLOB|CHAR|DATE|DATETIME|DECIMAL|DOUBLE|ENUM|FLOAT|INT"
    data_types_fn="${data_types_fn}|MEDIUMINT|SMALLINT|TIME|TIMESTAMP|TINYINT|VARCHAR|YEAR"

    # SQL Server data types
    data_types="${data_types}|bigint|bit|cursor|date|datetime|datetime2|datetimeoffset|image|int|money|nchar|ntext"
    data_types="${data_types}|nvarchar|real|smalldatetime|smallint|smallmoney|sql_variant|table|text|time"
    data_types="${data_types}|timestamp|tinyint|uniqueidentifier|varbinary|xml"
    data_types_fn="${data_types_fn}|binary|char|decimal|float|numeric|nvarchar|varbinary|varchar|varchar"

    # MS Access data types
    data_types="${data_types}|Text|Memo|Byte|Integer|Long|Single|Double|Currency|AutoNumber|Date"
    data_types="${data_types}|Time|Ole Object|Hyperlink|Lookup Wizard"

    # Add the language's grammar to the static completion list
    printf %s\\n "declare-option str-list sql_static_words ${keywords} ${operators} ${functions} ${data_types} ${data_types_fn} NULL" | tr '|' ' '

    # Highlight keywords
    printf %s "
        add-highlighter shared/sql/code/ regex '(?i)\b(${functions})\(.*?\)' 0:function
        add-highlighter shared/sql/code/ regex '(?i)\b(${data_types_fn})\(.*?\)' 0:type
        add-highlighter shared/sql/code/ regex '(?i)\b(${keywords})\b' 0:keyword
        add-highlighter shared/sql/code/ regex '(?i)\b(${operators})\b' 0:operator
        add-highlighter shared/sql/code/ regex '(?i)\b(${data_types})\b' 0:type
    "
}

add-highlighter shared/sql/code/ regex '\+|-|\*|/|%|&|\||^|=|>|<|>=|<=|<>|\+=|-=|\*=|/=|%=|&=|^-=|\|\*=' 0:operator
add-highlighter shared/sql/code/ regex \bNULL\b 0:value
add-highlighter shared/sql/code/ regex \b\d+(?:\.\d+)?\b 0:value

}
# Kakoune default color scheme

# For Code
face global value red
face global type yellow
face global variable green
face global module green
face global function cyan
face global string magenta
face global keyword blue
face global operator yellow
face global attribute green
face global comment cyan
face global documentation comment
face global meta magenta
face global builtin default+b

# For markup
face global title blue
face global header cyan
face global mono green
face global block magenta
face global link cyan
face global bullet cyan
face global list yellow

# builtin faces
face global Default default,default
face global PrimarySelection white,blue+fg
face global SecondarySelection black,blue+fg
face global PrimaryCursor black,white+fg
face global SecondaryCursor black,white+fg
face global PrimaryCursorEol black,cyan+fg
face global SecondaryCursorEol black,cyan+fg
face global LineNumbers default,default
face global LineNumberCursor default,default+r
face global MenuForeground white,blue
face global MenuBackground blue,white
face global MenuInfo cyan
face global Information black,yellow
face global Error black,red
face global DiagnosticError red
face global DiagnosticWarning yellow
face global StatusLine cyan,default
face global StatusLineMode yellow,default
face global StatusLineInfo blue,default
face global StatusLineValue green,default
face global StatusCursor black,cyan
face global Prompt yellow,default
face global MatchingChar default,default+b
face global Whitespace default,default+fd
face global BufferPadding blue,default
# ~/.config/kak/colors/dracula.kak
source "%val{runtime}/colors/default.kak"
################
################
reg c %{
# This CLI provides the functionality to test Kakoune scripts.
# Tests live in the `test` directory and must end with `_test.kak`.

require "option_parser"

VERSION = {{ `git describe --tags --always`.chomp.stringify }}

# Temporary files
# Prepare an output file to retrieve data from Kakoune.
log_file = File.tempfile
at_exit { log_file.delete }

# Kakoune script
kakoune_script = {{ read_file("rc/test.kak") }}

OptionParser.parse do |parser|
  parser.banner = "Usage: kak-test [switches] [--] [arguments]"
  parser.on("--print-kakoune-init", "Print Kakoune script") do
    puts kakoune_script
    exit
  end
  parser.on("-h", "--help", "Show this help") do
    puts parser
    exit
  end
  parser.on("-v", "--version", "Show version") do
    puts VERSION
    exit
  end
  parser.missing_option do |flag|
    abort "ERROR: #{flag} is missing something."
  end
  parser.invalid_option do |flag|
    abort "ERROR: #{flag} is not a valid option."
  end
end

# Run tests
kak_status = Process.run("kak", { "-n", "-ui", "dummy", "-e", "#{kakoune_script}; run_tests_and_exit #{log_file.path}" })
IO.copy(log_file, STDOUT)
exit kak_status.exit_code
}
################
################
reg c %{
name: Test CI

on: [push, pull_request]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Kakoune
        run: sudo snap install kakoune --classic

      - name: Install kakoune-test
        run: |
          curl -sSL -O https://github.com/alexherbo2/kakoune-test/releases/download/nightly/kak-test-nightly-x86_64-unknown-linux-musl.tar.xz
          tar xvf kak-test-nightly-x86_64-unknown-linux-musl.tar.xz

      - name: Run tests
        run: bin/kak-test
}
################
#source test/test_helper.kak

test test_select_words %{

  buffer_str! '*input*' %[
    [enum Color
      Red
      Green
      Blue

      def red?
        self == Color::Red
      end
    end]
  ]

  buffer_str! '*output*' %[
    [enum] [Color]
      [Red]
      [Green]
      [Blue]

      [def] [red]?
        [self] == [Color]::[Red]
      [end]
    [end]
  ]

  buffer '*input*'
  execute-keys 's\w+<ret><a-i>w'
  assert_buffer_eq '*input*' '*output*'
}

test test_select_big_words %{

  buffer_str! '*input*' %[
    [enum Color
      Red
      Green
      Blue

      def red?
        self == Color::Red
      end
    end]
  ]

  buffer_str! '*output*' %[
    [enum] [Color]
      [Red]
      [Green]
      [Blue]

      [def] [red?]
        [self] == [Color::Red]
      [end]
    [end]
  ]

  buffer '*input*'
  execute-keys 's\w+<ret><a-i><a-w>'
  assert_buffer_eq '*input*' '*output*'
}
################
# Provides basic Alacritty integration for Kakoune.
# Alacritty
# https://alacritty.org

# Commands
define-command -override alacritty-terminal-window -params .. -docstring 'alacritty-terminal-window [<program>] [<arguments>]: Creates a new terminal as an Alacritty window.' %{
  nop %sh{
    alacritty msg create-window --working-directory "$PWD" --command sh -c 'export KAKOUNE_SESSION=$1 KAKOUNE_CLIENT=$2 && shift 2 && exec "$@"' -- "$kak_session" "$kak_client" "${@:-$SHELL}"
  }
}

complete-command alacritty-terminal-window shell

define-command -override alacritty-terminal-popup -params .. -docstring 'alacritty-terminal-popup [<program>] [<arguments>]: Creates a new terminal as an Alacritty window (class: popup).' %{
  nop %sh{
    alacritty msg create-window --class=popup --working-directory "$PWD" --command sh -c 'export KAKOUNE_SESSION=$1 KAKOUNE_CLIENT=$2 && shift 2 && exec "$@"' -- "$kak_session" "$kak_client" "${@:-$SHELL}"
  }
}

complete-command alacritty-terminal-popup shell

define-command -override alacritty-terminal-panel -params .. -docstring 'alacritty-terminal-panel [<program>] [<arguments>]: Creates a new terminal as an Alacritty window (class: panel).' %{
  nop %sh{
    alacritty msg create-window --class=panel --working-directory "$PWD" --command sh -c 'export KAKOUNE_SESSION=$1 KAKOUNE_CLIENT=$2 && shift 2 && exec "$@"' -- "$kak_session" "$kak_client" "${@:-$SHELL}"
  }
}

complete-command alacritty-terminal-panel shell

define-command -override alacritty-focus -params ..1 -docstring 'alacritty-focus [<client>]: Moves focus to the given client, or the current one.' %{
  fail 'alacritty-focus: Not implemented.'
}

complete-command alacritty-focus client

# Hooks
# Alacritty detection
# Ensure that we’re running on Alacritty.
remove-hooks global alacritty-detection
hook -group alacritty-detection global ClientCreate '.*' %{
  trigger-user-hook "TERM=%val{client_env_TERM}"
}

# Alacritty integration
remove-hooks global alacritty-integration
hook -group alacritty-integration global User 'TERM=alacritty' %{
  alias global terminal alacritty-terminal-window
  alias global terminal-horizontal alacritty-terminal-window
  alias global terminal-vertical alacritty-terminal-window
  alias global terminal-tab alacritty-terminal-window
  alias global terminal-window alacritty-terminal-window
  alias global terminal-popup alacritty-terminal-popup
  alias global terminal-panel alacritty-terminal-panel
  alias global focus alacritty-focus
}
################
# tmux
# https://github.com/tmux/tmux

# Commands
define-command -override tmux-terminal-horizontal -params .. -docstring 'tmux-terminal-horizontal [<program>] [<arguments>]: Creates a new terminal to the right as a tmux pane.' %{
  tmux_impl split-window -e "KAKOUNE_SESSION=%val{session}" -e "KAKOUNE_CLIENT=%val{client}" -h %arg{@}
}

complete-command tmux-terminal-horizontal shell

define-command -override tmux-terminal-vertical -params .. -docstring 'tmux-terminal-vertical [<program>] [<arguments>]: Creates a new terminal below as a tmux pane.' %{
  tmux_impl split-window -e "KAKOUNE_SESSION=%val{session}" -e "KAKOUNE_CLIENT=%val{client}" -v %arg{@}
}

complete-command tmux-terminal-vertical shell

define-command -override tmux-terminal-window -params .. -docstring 'tmux-terminal-window [<program>] [<arguments>]: Creates a new terminal to the right as a tmux window.' %{
  tmux_impl new-window -e "KAKOUNE_SESSION=%val{session}" -e "KAKOUNE_CLIENT=%val{client}" -a %arg{@}
}

complete-command tmux-terminal-window shell

define-command -override tmux-terminal-popup -params .. -docstring 'tmux-terminal-popup [<program>] [<arguments>]: Creates a new terminal as a tmux popup.' %{
  # TODO: Remove -d flag.
  tmux_impl display-popup -e "KAKOUNE_SESSION=%val{session}" -e "KAKOUNE_CLIENT=%val{client}" -w 90% -h 90% -d %sh{pwd} -E %arg{@}
}

complete-command tmux-terminal-popup shell

define-command -override tmux-terminal-panel -params .. -docstring 'tmux-terminal-panel [<program>] [<arguments>]: Creates a new terminal as a tmux panel.' %{
  tmux_impl split-window -e "KAKOUNE_SESSION=%val{session}" -e "KAKOUNE_CLIENT=%val{client}" -h -b -l 30 -t '{left}' %arg{@}
}

complete-command tmux-terminal-panel shell

define-command -override tmux-focus -params ..1 -docstring 'tmux-focus [<client>]: Moves focus to the given client, or the current one.' %{
  evaluate-commands -try-client %arg{1} %{
    tmux_impl switch-client -t %val{client_env_TMUX_PANE}
  }
}

complete-command tmux-focus client

define-command -override -hidden tmux_impl -params .. %{
  nop %sh{
    TMUX=$kak_client_env_TMUX TMUX_PANE=$kak_client_env_TMUX_PANE nohup tmux "$@" < /dev/null > /dev/null 2>&1 &
  }
}

# Hooks
# tmux detection
# Ensure that we’re running on tmux.
remove-hooks global tmux-detection
hook -group tmux-detection global ClientCreate '.*' %{
  trigger-user-hook "TMUX=%val{client_env_TMUX}"
}

# tmux integration
remove-hooks global tmux-integration
hook -group tmux-integration global User 'TMUX=(.+?),(.+?),(.+?)' %{
  alias global terminal tmux-terminal-horizontal
  alias global terminal-horizontal tmux-terminal-horizontal
  alias global terminal-vertical tmux-terminal-vertical
  alias global terminal-tab tmux-terminal-window
  alias global terminal-window tmux-terminal-window
  alias global terminal-popup tmux-terminal-popup
  alias global terminal-panel tmux-terminal-panel
  alias global focus tmux-focus

  # Clipboard integration
  hook -group tmux-integration global RegisterModified '"' %{
    tmux_impl set-buffer -w %val{main_reg_dquote}
  }
}
