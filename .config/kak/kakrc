# Kakoune
# https://kakoune.org
# https://github.com/mawww/kakoune
#
# Configuration:
#
# https://github.com/Delapouite/dot-in-the-sky/blob/master/.config/kak/kakrc
# https://github.com/mawww/config/blob/master/kakrc
# https://github.com/occivink/config/blob/master/.config/kak/kakrc
# https://github.com/topisani/dotfiles/blob/master/config/kak/kakrc
# https://gitlab.com/vbauerster/dotfiles/-/blob/master/.config/kak/kakrc

# Preamble ---------------------------------------------------------------------
define-command -override colorscheme -params 1 -docstring 'load color scheme' %{
  source "%val{config}/colors/%arg{1}.kak"
}
evaluate-commands %sh{
  find -L "$kak_config/autoload" -type f -name '*.kak' -exec printf 'source "%s";' {} +
}
# source "%val{config}/kakrc"
# source ~/.kakrc

# Preamble ---------------------------------------------------------------------

remove-hooks global config

try %sh{
  kak-lsp --kakoune --session "$kak_session"
  kak-test --print-kakoune-init
}

# Options ----------------------------------------------------------------------

# UI options
set-option global startup_info_version 20221231
set-option global ui_options terminal_set_title=no terminal_assistant=none
# Matching pairs
set-option global matching_pairs ( ) { } [ ] < > “ ” ‘ ’ « » ‹ ›
set-option global scrolloff 5,1
add-highlighter -override global/show-matching show-matching
add-highlighter -override global/number-lines number-lines -hlcursor

# Status line
set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@%val{session}'

# Color scheme: One light (https://git.sr.ht/~raiguard/one.kak)
source "%val{runtime}/colors/default.kak"
# colorscheme one-light

# Custom faces
# set-face global Whitespace "rgb:%opt{bg}+f"
# set-face global SelectedText "rgb:%opt{blue}+f"

# System clipboard
# set-option global clipboard_copy_command 'pbcopy'
# set-option global clipboard_copy_args

# Highlight whitespace
# add-highlighter -override global/whitespace ref whitespace

# Highlight various characters
# https://unicode-table.com
add-highlighter -override global/U+2013 regex '–' '0:green+f'
add-highlighter -override global/U+2014 regex '—' '0:green+bf'
add-highlighter -override global/math-symbols regex '[−×]' '0:cyan+f'

# Mappings ---------------------------------------------------------------------

# Text objects
# Quotation marks
map -docstring 'double quotation mark' global object <a-Q> 'c“,”<ret>'
map -docstring 'single quotation mark' global object <a-q> 'c‘,’<ret>'
map -docstring 'double angle quotation mark' global object <a-G> 'c«,»<ret>'
map -docstring 'single angle quotation mark' global object <a-g> 'c‹,›<ret>'
# Tag
map -docstring 'tag' global object t 'c<lt>.+?<gt>,<lt>/.+?<gt><ret>'
# Line
map -docstring 'line' global object x '<esc>x_'
map -docstring 'yank joined selections into system clipboard' global user y ': yank_terminal_clipboard<ret>'
map global normal <ret> ':'
map global normal f '<a-:>F'
map global normal F '<a-:><a-;><a-F>'
map global normal t '<a-:>T'
map global normal T '<a-:><a-;><a-T>'
# map global normal / '<a-:>?'
# map global normal ? '<a-:><a-;><a-?>'
# map global normal n '<a-:>?<ret>'
# map global normal N '<a-:><a-;><a-?><ret>'
map global normal x ': select-or-extend-lines<ret>'
map global normal X 'x<a-:><a-;>'
map global normal v '<a-i>'
map global normal V '<a-a>'
map global normal { '<a-:><a-;>{p'
map global normal } '<a-:>}p'
define-command select-or-extend-lines %{
  execute-keys '<a-:>'
  try %{
    # At least one selection is not full, so select whole lines.
    execute-keys -draft '<a-K>\A^.*\n\z<ret>'
    execute-keys 'x'
  } catch %{
    execute-keys 'Jx'
  }
}

# Normal mode ------------------------------------------------------------------

# Hot reloading
# map -docstring 'reload kakrc' global user <F5> ': source "%val{runtime}/kakrc"; echo reloaded kakrc<ret>'

# Enter command mode
map -docstring 'enter command' global normal <ret> :

# Re-center view
# map -docstring 'scroll to put the cursor on the top line of the window' global user , vtvm

# Editing
# map -docstring 'save file' global normal <c-s> ': write; echo -markup ''{Information}file saved''<ret>'
# map -docstring 'close client' global normal <c-q> ': quit<ret>'
# map -docstring 'close buffer' global normal <c-w> ': delete-buffer; echo -markup ''{Information}buffer closed''<ret>'

# Navigation
# map -docstring 'scroll one page up' global normal <pageup> ,<pageup>
# map -docstring 'scroll one page down' global normal <pagedown> ,<pagedown>
# map -docstring 'move to previous paragraph' global normal [ ,gh[pgi
# map -docstring 'move to next paragraph' global normal ] ,]plgi

# Selection primitives
map -docstring 'select inner object' global normal v <a-i>
map -docstring 'select whole object' global normal V <a-a>
map -docstring 'enter surround mode' global normal q ': enter-surround-mode<ret>'
# map -docstring 'enter select mode' global normal s ': enter-select-mode<ret>'

# User mode --------------------------------------------------------------------

# LSP
# map -docstring 'lsp' global user l ': enter-user-mode lsp<ret>'
# map -docstring 'open document symbol picker' global user s ': enter-user-mode lsp<ret>s'
# map -docstring 'open workspace symbol picker' global user S ': enter-user-mode lsp<ret>o'

# Formatting and parsing date-time
map -docstring 'format date to 2006-01-02' global user d '| date -d "$kak_selection" ''+%F''<ret>'
map -docstring 'format date to 2006-01-02 Mon' global user D '| date -d "$kak_selection" ''+%F %a''<ret>'

# Show the Unicode value under the cursor.
map -docstring 'Unicode' global user u ': echo -markup "{Information}U+%sh{printf ''%04x'' ""$kak_cursor_char_value""}"<ret>'

# Add search flags
map global prompt <a-i> '<home>(?i)<end>'
map global prompt <a-o> '<home>(?S)<end>'

# Goto mode --------------------------------------------------------------------

map -docstring 'file' global goto f '<a-;>: open-file-picker<ret>'

define-command -override open-file-picker -docstring 'open-file-picker: Opens file picker.' %{
  prompt -menu file: -shell-script-candidates 'fd -H --type file' %{
    edit %val{text}
  }
}

map -docstring 'buffer' global goto b '<a-;>: open-buffer-picker<ret>'

define-command -override open-buffer-picker -docstring 'open-buffer-picker: Opens buffer picker.' %{
  prompt -menu buffer: -buffer-completion %{
    buffer %val{text}
  }
}

map -docstring 'global search' global goto / '<a-;>: open-global-search-picker<ret>'

add-highlighter shared/grep regex '^(.+?):(\d+):(\d+):(.+?)$' 1:string 2:value 3:value

hook -group grep-highlight global BufSetOption filetype=grep %{
  add-highlighter buffer/grep ref grep
  map buffer normal <ret> ': grep_jump<ret>'
  hook -always -once buffer BufSetOption 'filetype=.*' %{
    remove-highlighter buffer/grep
  }
}

define-command -hidden grep_jump %{
  evaluate-commands -draft %{
    execute-keys ',;xs^(.+?):(\d+):(\d+):(.+?)$<ret>'
    evaluate-commands -client %val{client} -- edit -existing %reg{1} %reg{2} %reg{3}
  }
}

define-command fifo -params .. %{
  reg d %sh{mktemp -d}
  reg f "%reg{d}/fifo"
  nop %sh{
    mkfifo "$kak_reg_f"
    { "$@" > "$kak_reg_f"; } < /dev/null > /dev/null 2>&1 &
  }
  edit! -fifo %reg{f} '[fifo]'
  hook -always -once buffer BufCloseFifo '' "nop %%sh{ echo rm -Rf ""%reg{d}"" >> ~/t.txt }"
}

complete-command fifo shell

declare-option str grep_command rg
declare-option str-list grep_args --hidden --column --with-filename

define-command -override open-global-search-picker -docstring 'open-global-search-picker: Opens global search picker.' %{
  # Provides word completion
  prompt grep: -shell-script-candidates %{
    echo "write '$kak_response_fifo'" > "$kak_command_fifo"
    cat "$kak_response_fifo" | kak -f 's[\w-]{4,}<ret>y%<a-R>a<ret>'
  } %{
    fifo rg --hidden --column --with-filename %val{text}
    rename-buffer "%arg{@}.refs"
    set-option buffer filetype grep
  }
}

# Vim-like unimpaired mappings
declare-user-mode unimpaired_left
declare-user-mode unimpaired_right
map -docstring 'unimpaired_left' global user '[' ': enter-user-mode unimpaired_left<ret>'
map -docstring 'unimpaired_right' global user ']' ': enter-user-mode unimpaired_right<ret>'
map -docstring 'read-only' global unimpaired_left r ': set-option buffer readonly yes<ret>'
map -docstring 'read-only' global unimpaired_right r ': set-option buffer readonly no<ret>'
map -docstring 'whitespace' global unimpaired_left w ': remove-highlighter global/whitespace<ret>'
map -docstring 'whitespace' global unimpaired_right w ': add-highlighter global/whitespace show-whitespaces<ret>'
map -docstring 'rulers' global unimpaired_left r ': remove-highlighter global/rulers<ret>'
map -docstring 'rulers' global unimpaired_right r ': add-highlighter global/rulers column 81 default,cyan<ret>'

# Commands ---------------------------------------------------------------------

# Shortcuts

# Mappings ─────────────────────────────────────────────────────────────────────

map -docstring 'erase character before cursor' global normal <backspace> ': erase-character-before-cursor<ret>'
map -docstring 'erase character under cursor' global normal <del> ': erase-character-under-cursor<ret>'

map -docstring 'select next word' global normal w ': select-next-word<ret>'

map -docstring 'move line down' global normal <a-down> ': move-lines-down<ret>'
map -docstring 'move line up' global normal <a-up> ': move-lines-up<ret>'

map -docstring 'select all occurrences of current selection' global normal <a-percent> ': select-highlights<ret>'

map -docstring 'increment selection' global normal <c-a> ': increment-selection %val{count}<ret>'
map -docstring 'decrement selection' global normal <c-x> ': decrement-selection %val{count}<ret>'

map -docstring 'buffer directory' global prompt <a-/> '%sh{dirname "$kak_bufname"}<a-!>/'

# Commands ─────────────────────────────────────────────────────────────────────

define-command -override erase-character-before-cursor -docstring 'erase character before cursor' %{
  execute-keys -draft ';i<backspace>'
}

define-command -override erase-character-under-cursor -docstring 'erase character under cursor' %{
  execute-keys -draft ';i<del>'
}

define-command -override select-next-word -docstring 'select next word' %{
  evaluate-commands -itersel %{
    hook -group select-next-word -always -once window User "%val{selection_desc}" %{
      search-next-word
    }
    try %{
      execute-keys '<a-i>w'
      trigger-user-hook "%val{selection_desc}"
    } catch %{
      search-next-word
    }
    remove-hooks window select-next-word
  }
}

define-command -override -hidden search-next-word -docstring 'search next word' %{
  execute-keys 'h/\W\w<ret><a-i>w'
}

# Reference: https://code.visualstudio.com/docs/getstarted/keybindings#_basic-editing
define-command -override move-lines-down -docstring 'move line down' %{
  execute-keys -draft 'x<a-_><a-:>Z;ezjxdzP'
}

define-command -override move-lines-up -docstring 'move line up' %{
  execute-keys -draft 'x<a-_><a-:><a-;>Z;bzkxdzp'
}

define-command -override select-highlights -docstring 'select all occurrences of current selection' %{
  execute-keys '"aZ*%s<ret>"bZ"az"b<a-z>a'
}

define-command -override increment-selection -params 1 -docstring 'increment-selection <count>: increment selection by count' %{
  execute-keys "a+%sh{expr $1 '|' 1}<esc>|{ cat; echo; } | bc<ret>"
}

define-command -override decrement-selection -params 1 -docstring 'decrement-selection <count>: decrement selection by count' %{
  execute-keys "a-%sh{expr $1 '|' 1}<esc>|{ cat; echo; } | bc<ret>"
}

define-command -override evaluate-selections -docstring 'evaluate selections' %{
  evaluate-commands -itersel %{
    evaluate-commands %val{selection}
  }
}

alias global = evaluate-selections

define-command link-window -params 1 -docstring 'link-window <client>: link window to client' %{
  execute-keys '"sZ'
  execute-keys -client %arg{1} '"sz'
}

complete-command link-window client

define-command grab_buffer_in_viewport -params 1 -client-completion -docstring 'link-window <client>: link window to client' %{
  execute-keys '"sZ'
  execute-keys -client %arg{1} '"sz'
}

define-command -override move-window -params 1 -client-completion -docstring 'move-window <client>: move window to client' %{
  execute-keys '"sZ'
  execute-keys -client %arg{1} '"sz'
  buffer-next
}

define-command -override swap-window -params 1 -client-completion -docstring 'swap-window <client>: swap window with client' %{
  execute-keys '"sZ'
  execute-keys -client %arg{1} '"tZ'
  execute-keys '"tz'
  execute-keys -client %arg{1} '"sz'
}

# Surround selections
# Reference: https://github.com/mawww/kakoune/blob/master/src/normal.cc#:~:text=select_object

# Modes ────────────────────────────────────────────────────────────────────────

try %[ declare-user-mode surround ]

define-command -override enter-surround-mode -docstring 'enter surround mode' %{
  enter-user-mode surround
}

# Mappings ─────────────────────────────────────────────────────────────────────

# parenthesis block
# brace block
# bracket block
# angle block
# double quote string
# single quote string
# grave quote string
# double quotation mark
# single quotation mark
# double angle quotation mark
# single angle quotation mark
# emphasis
# strong
# map -docstring 'enter surround mode' global normal q ': enter-surround-mode<ret>'
define-command -override -hidden surround-init %{
  # Enter text
  map -docstring 'enter insert mode' global surround i ': surround-enter-insert-mode<ret>'
  map -docstring 'key' global surround k ': surround-key<ret>'
  map -docstring 'tag' global surround t ': surround-tag<ret>'

  # Editing
  map -docstring 'space' global surround <space> ': surround-add-space<ret>'
  map -docstring 'line' global surround <ret> ': surround-add-line<ret>'
  map -docstring 'delete' global surround <backspace> ': surround-delete<ret>'
  map -docstring 'delete' global surround <del> ': surround-delete<ret>'

  # Surrounding pairs
  declare-surrounding-pair 'parenthesis block' b ( )
  declare-surrounding-pair 'brace block' B { }
  declare-surrounding-pair 'bracket block' r [ ]
  declare-surrounding-pair 'angle block' a <lt> <gt>
  declare-surrounding-pair 'double quote string' Q '"' '"'
  declare-surrounding-pair 'single quote string' q "'" "'"
  declare-surrounding-pair 'grave quote string' g ` `
  declare-surrounding-pair 'double quotation mark' <a-Q> “ ”
  declare-surrounding-pair 'single quotation mark' <a-q> ‘ ’
  declare-surrounding-pair 'double angle quotation mark' <a-G> « »
  declare-surrounding-pair 'single angle quotation mark' <a-g> ‹ ›

  # Emphasis
  map -docstring 'emphasis' global surround _ ': surround-add _ _<ret>'
  map -docstring 'strong' global surround * ': surround-add ** **<ret>'
}

# Commands ─────────────────────────────────────────────────────────────────────

# Declare surrounding pairs
define-command -override declare-surrounding-pair -params 4 -docstring 'declare-surrounding-pair <description> [alias] <opening> <closing>: declare surrounding pair' %{
  try %[ map -docstring %arg{1} global surround %arg{2} ": surround-add %%🐈%arg{3}🐈 %%🐈%arg{4}🐈<ret>" ]
  try %[ map -docstring %arg{1} global surround %arg{3} ": surround-add %%🐈%arg{3}🐈 %%🐈%arg{4}🐈<ret>" ]
  try %[ map -docstring %arg{1} global surround %arg{4} ": surround-add %%🐈%arg{3}🐈 %%🐈%arg{4}🐈<ret>" ]
}

# Enter insert mode
define-command -override -hidden surround-enter-insert-mode -docstring 'surround: enter insert mode' %{
  execute-keys -save-regs '' 'Z'
  hook -always -once window ModeChange 'pop:insert:normal' %{
    hook -always -once window ModeChange 'pop:insert:normal' %{
      execute-keys z
      set-register ^
      echo
    }
    execute-keys -with-hooks a
  }
  execute-keys -with-hooks i
}

# Surround key
define-command -override -hidden surround-key -docstring 'surround key' %{
  on-key %{
    surround-add %val{key} %val{key}
  }
}

# Surround tag
define-command -override -hidden surround-tag -docstring 'surround tag' %{
  prompt surround-tag: %{
    surround-add "<%val{text}>" "</%val{text}>"
  }
}

# Surround selected text
define-command -override -hidden surround-add -params 2 %{
  evaluate-commands -save-regs '"' %{
    set-register '"' %arg{1}
    execute-keys -draft P
    set-register '"' %arg{2}
    execute-keys -draft p
  }
}

define-command -override -hidden surround-add-space %{
  surround-add ' ' ' '
}

define-command -override -hidden surround-add-line %{
  # Extract selected text on its own line; clean whitespaces around the selection.
  try %[ execute-keys -draft 'i<ret><esc>kgl<a-i><space>d' ]
  try %[ execute-keys -draft 'a<ret><esc>jgl<a-i><space>d' ]

  # Indent selection
  execute-keys -draft '<a-:><a-;>K<a-:>J<a-&>'
  execute-keys -draft '<gt>'
}

# Delete surrounding
define-command -override -hidden surround-delete %{
  # Tag support
  try %{
    execute-keys 'y<a-a>c<lt>.+?<gt>,<lt>/.+?<gt><ret>R'
  } catch %{
    # Delete left surrounding
    try %{
      execute-keys -draft '<a-:><a-;>h<a-a><space>d'
    } catch %{
      execute-keys -draft 'i<backspace>'
    }

    # Delete right surrounding
    try %{
      execute-keys -draft '<a-:>l<a-a><space>d'
    } catch %{
      execute-keys -draft 'a<del>'
    }
  }
}

# Initialization ───────────────────────────────────────────────────────────────

surround-init

define-command alacritty-open-new-client -params .. %{
  nop %sh{
    alacritty msg create-window -e kak -c "$kak_session" -e "$*"
  }
}

complete-command alacritty-open-new-client command

define-command foot-open-new-client -params .. %{
  nop %sh{
    footclient -e kak -c "$kak_session" -e "$*"
  }
}

complete-command foot-open-new-client command

define-command -override mkdir -docstring 'make directory for the current buffer' %{
  nop %sh(mkdir -p -- "$(dirname -- "$kak_buffile")")
}

# Terminal integration
hook -group alacritty-detection global ClientCreate '.*' %{
  trigger-user-hook "TERM=%val{client_env_TERM}"
}

# Alacritty terminal detection
hook -group alacritty-integration global User 'TERM=alacritty' %{
  alias global open-new-client alacritty-open-new-client
}

# foot terminal detection
hook -group alacritty-integration global User 'TERM=foot' %{
  alias global open-new-client foot-open-new-client
}

define-command open-kakrc -docstring 'open kakrc' %{
  edit "%val{config}/kakrc"
}

define-command open-config -params 1 -docstring 'open from %val{config}' %{
  edit "%val{config}/%arg{1}"
}

complete-command -menu open-config shell-script-candidates %{
  cd "$kak_config" && find -L . -type f | sort -u
}

define-command -override open-runtime -params 1 -docstring 'open from %val{runtime}' %{
  edit "%val{runtime}/%arg{1}"
}

complete-command -menu open-config shell-script-candidates %{
  cd "$kak_runtime" && find -L . -type f | sort -u
}

define-command yank_terminal_clipboard %{
  nop %sh{
    printf 'echo -to-file %%(%s) -- "%%val{selections}"' "$kak_response_fifo" > "$kak_command_fifo"
    {
      printf '\033]52;c;'
      tr '\0' '\n' < "$kak_response_fifo" | sed 's/\\\\/\\/g' | base64
      printf '\a'
    } > /dev/tty
  }
}

# Show Unicode value in the status line.
define-command get_character_info %{
  echo %sh{printf 'U+%04x' "$kak_cursor_char_value"}
}

# Language support -------------------------------------------------------------

# Indentation
set-option global tabstop 4
set-option global indentwidth 2
set-option global disabled_hooks '.+-trim-indent|.+-insert|.+-indent'

# Kakoune
# https://kakoune.org
hook -group config global BufSetOption filetype=kak %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '#'
}

# Crystal
# https://crystal-lang.org
hook -group config global BufSetOption filetype=crystal %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '#'
}

# JavaScript
# https://developer.mozilla.org/en-US/docs/Web/JavaScript
hook -group config global BufSetOption filetype=javascript %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '//'
  set-option buffer block_comment_tokens '/*' '*/'
}

# Lua
# https://lua.org
hook -group config global BufSetOption filetype=lua %{
  set-option buffer indentwidth 2
  set-option buffer line_comment_token '--'
  set-option buffer block_comment_tokens '[[--' '--]]'
}

# Makefile
# https://en.wikipedia.org/wiki/Make_(software)#Makefile
hook -group config global BufSetOption filetype=makefile %{
  set-option buffer indentwidth 0
  set-option buffer line_comment_token '#'
}

# grep
# https://en.wikipedia.org/wiki/Grep
hook -group config global BufSetOption filetype=grep %{
  map buffer normal <ret> ': grep-jump<ret>'
}

# Detection --------------------------------------------------------------------

hook -group config global BufCreate '.*/\.kakrc' %{
  set-option buffer filetype kak
}

hook -group config global BufCreate '.*/(profile|bashrc|tmux.conf)' %{
  set-option buffer filetype sh
}

# Mark

# Iterate selections one by one with `Control+N` and `Control+P`.

# Save selections with `Y` or its strong version `Alt+Y` (same as `Y Space`).

# Clear registers with `D`.  You can specify the register to use.  For example, `"/D` to clear the search register.

# Restore registers as selections with `z` or its strong version `Z` (same as `zD`).

# You can specify the register to use for all commands.

# == Commands

# - `z` ⇒ Restore register.
# - `Z` ⇒ Consume register.

# - `D` ⇒ Clear register.

# - `Y` ⇒ Add selections.
# - `Alt+Y` ⇒ Consume selections.

# - `Control+N` ⇒ Iterate next selection.
# - `Control+P` ⇒ Iterate previous selection.

# == Faces

# - `MarkedPrimaryCursor`
# - `MarkedPrimarySelection`

# - `MarkedSecondaryCursor`
# - `MarkedSecondarySelection`
# Options ──────────────────────────────────────────────────────────────────────

# Internal variables
declare-option -hidden range-specs mark_ranges

# Faces
set-face global MarkedPrimaryCursor '+ub'
set-face global MarkedPrimarySelection '+ub'
set-face global MarkedSecondaryCursor '+u'
set-face global MarkedSecondarySelection '+u'

# Mappings ─────────────────────────────────────────────────────────────────────

map -docstring 'restore register' global normal z ': restore-register %val{register}<ret>'
map -docstring 'consume register' global normal Z ': consume-register %val{register}<ret>'

map -docstring 'clear register' global normal D ': clear-register %val{register}<ret>'

map -docstring 'add selections' global normal Y ': add-selections %val{register}<ret>'
map -docstring 'consume selections' global normal <a-Y> ': consume-selections %val{register}<ret>'

map -docstring 'iterate next selection' global normal <c-n> ': iterate-next-selection %val{register}<ret>'
map -docstring 'iterate previous selection' global normal <c-p> ': iterate-previous-selection %val{register}<ret>'

# Commands ─────────────────────────────────────────────────────────────────────

define-command -override restore-register -params 1 -docstring 'restore-register <register>: restore register (default: ^)' %{
  try %[ execute-keys """%arg{1}z" ]
}

define-command -override consume-register -params 1 -docstring 'consume-register <register>: consume register (default: ^)' %{
  restore-register %arg{1}
  clear-register %arg{1}
}

define-command -override clear-register -params 1 -docstring 'clear-register <register>: clear register (default: ^)' %{
  # Handle null named register.
  try %{
    set-register %arg{1}
    echo -markup "{Information}cleared register '%arg{1}'{Default}"
  } catch %{
    set-register '^'
    echo -markup "{Information}cleared register '^'{Default}"
  }
}

define-command -override restore-selections -params 1 -docstring 'restore-selections <register>: restore selections (default: ^)' %{
  try %[ execute-keys """%arg{1}<a-z>a" ]
}

define-command -override save-selections -params 1 -docstring 'save-selections <register>: save selections (default: ^)' %{
  execute-keys -save-regs '' """%arg{1}Z"
}

define-command -override add-selections -params 1 -docstring 'add-selections <register>: add selections (default: ^)' %{
  evaluate-commands -draft consume-selections %arg{1}
  # Display saved selections:
  # Handle null named register.
  try %{
    execute-keys -save-regs %arg{1} """%arg{1}Z"
  } catch %{
    execute-keys Z
  }
}

define-command -override consume-selections -params 1 -docstring 'consume-selections <register>: consume selections (default: ^)' %{
  restore-selections %arg{1}
  save-selections %arg{1}
  execute-keys ','
}

define-command -override iterate-next-selection -params 1 -docstring 'iterate-next-selection <register>: iterate next selection (default: ^)' %{
  restore-register %arg{1}
  execute-keys ')'
  consume-selections %arg{1}
}

define-command -override iterate-previous-selection -params 1 -docstring 'iterate-previous-selection <register>: iterate previous selection (default: ^)' %{
  restore-register %arg{1}
  execute-keys '('
  consume-selections %arg{1}
}

# Highlighters ─────────────────────────────────────────────────────────────────

define-command -override -hidden update-mark-ranges %{
  # Reset ranges
  evaluate-commands -buffer '*' unset-option buffer mark_ranges
  try %{
    evaluate-commands -draft %{
      # Jump to the buffer
      execute-keys 'z'
      # Initialize ranges
      set-option buffer mark_ranges %val{timestamp}
      # Mark the main selection
      evaluate-commands -draft %{
        execute-keys ','
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedPrimarySelection"
        execute-keys ';'
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedPrimaryCursor"
      }
      # Mark other selections
      execute-keys '<a-,>'
      evaluate-commands -draft -itersel %{
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedSecondarySelection"
        execute-keys ';'
        set-option -add buffer mark_ranges "%val{selection_desc}|MarkedSecondaryCursor"
      }
    }
  }
}

define-command -override show-marks -docstring 'show marks' %{
  add-highlighter -override global/marks ranges mark_ranges
  remove-hooks global show-marks
  hook -group show-marks -always global RegisterModified '\^' update-mark-ranges
  update-mark-ranges
}

define-command -override hide-marks -docstring 'hide marks' %{
  remove-hooks global show-marks
  remove-highlighter global/marks
  evaluate-commands -buffer '*' unset-option buffer mark_ranges
}

# Initialization
show-marks

# Notes ------------------------------------------------------------------------

hook -group config global BufCreate '.*/docs/notes.txt' %{
  set-option buffer filetype notes
}

hook -group config global BufSetOption filetype=notes %{
  add-highlighter -override buffer/notes ref notes
  map -docstring 'insert date (2006-01-02 Mon)' buffer insert <c-u> '<a-;>;<a-;>!date ''+%F %a'' | tr -d ''\n''<ret><right>'
  map -docstring 'insert date (2006-01-02 Mon 15:04)' buffer insert <c-i> '<a-;>;<a-;>!date ''+%F %a %H:%M'' | tr -d ''\n''<ret><right>'
}

add-highlighter -override shared/notes regions
add-highlighter -override shared/notes/text default-region group
add-highlighter -override shared/notes/text/entry-date-year regex '^\d{4}' 0:comment
add-highlighter -override shared/notes/text/entry-date-year-month regex '^\d{4}-\d{2}' 0:comment
add-highlighter -override shared/notes/text/entry-date regex '^\d{4}-\d{2}-\d{2} \w{3}' 0:comment
add-highlighter -override shared/notes/text/entry-date-time regex '^\d{4}-\d{2}-\d{2} \w{3} \d{2}:\d{2}' 0:comment
add-highlighter -override shared/notes/text/keyword regex '\b(Buy|Go on|Go to|Read|Sign up|Update|Watch)\b' 0:keyword
add-highlighter -override shared/notes/text/url regex 'https?://\S+' 0:link
add-highlighter -override shared/notes/info region -recurse '\(' '\(' '\)' group
add-highlighter -override shared/notes/info/content fill string
add-highlighter -override shared/notes/info/url ref notes/text/url
add-highlighter -override shared/notes/info/delimiters regex '(?<opening>.).+(?<closing>.)' opening:string closing:string
add-highlighter -override shared/notes/tag region -recurse '\[' '\[' '\]' fill meta

# List -------------------------------------------------------------------------

hook -group config global BufCreate '.*/list.txt' %{
  set-option buffer filetype list
}

hook -group config global BufSetOption filetype=list %{
  add-highlighter -override buffer/list ref list
}

add-highlighter -override shared/list regions
add-highlighter -override shared/list/text default-region group
add-highlighter -override shared/list/text/number regex '\b\d{2}\b' 0:value
add-highlighter -override shared/list/text/date regex '\b\d{4}-\d{2}-\d{2}\b' 0:string
add-highlighter -override shared/list/text/year regex '\b\d{4}\b' 0:string
add-highlighter -override shared/list/text/keyword regex '\b(Movie|Special)\b' 0:keyword
add-highlighter -override shared/list/text/url regex 'https?://\S+' 0:link
