# Extensions ───────────────────────────────────────────────────────────────────

declare-option str github %sh(echo ~/repositories/github.com)

source "%opt(github)/alexherbo2/pathogen.kak/rc/pathogen.kak"

pathogen-infect "%opt(github)/alexherbo2/auto-pairs.kak"
pathogen-infect "%opt(github)/alexherbo2/bc.kak"
pathogen-infect "%opt(github)/alexherbo2/chronic.kak"
pathogen-infect "%opt(github)/alexherbo2/connect.kak"
pathogen-infect "%opt(github)/alexherbo2/distraction-free.kak"
pathogen-infect "%opt(github)/alexherbo2/explore.kak"
pathogen-infect "%opt(github)/alexherbo2/flag.kak"
pathogen-infect "%opt(github)/alexherbo2/move-line.kak"
pathogen-infect "%opt(github)/alexherbo2/objectify.kak"
pathogen-infect "%opt(github)/alexherbo2/pad-number.kak"
pathogen-infect "%opt(github)/alexherbo2/phantom.kak"
pathogen-infect "%opt(github)/alexherbo2/portal.kak"
pathogen-infect "%opt(github)/alexherbo2/replace.kak"
pathogen-infect "%opt(github)/alexherbo2/search-highlighter.kak"
pathogen-infect "%opt(github)/alexherbo2/select.kak"
pathogen-infect "%opt(github)/alexherbo2/shell.kak"
pathogen-infect "%opt(github)/alexherbo2/snippets.kak"
pathogen-infect "%opt(github)/alexherbo2/space-indent.kak"
pathogen-infect "%opt(github)/alexherbo2/toggle-highlighter.kak"
pathogen-infect "%opt(github)/alexherbo2/volatile-highlighter.kak"
pathogen-infect "%opt(github)/alexherbo2/word-movement.kak"
pathogen-infect "%opt(github)/alexherbo2/yank-ring.kak"
pathogen-infect "%opt(github)/Delapouite/kakoune-buffers"
pathogen-infect "%opt(github)/Delapouite/kakoune-text-objects"
pathogen-infect "%opt(github)/eraserhd/parinfer-rust/rc"
pathogen-infect "%opt(github)/mawww/notmuch.kak"
pathogen-infect "%opt(github)/occivink/kakoune-find"
pathogen-infect "%opt(github)/occivink/kakoune-sudo-write"
pathogen-infect "%opt(github)/occivink/kakoune-vertical-selection"
pathogen-infect "%opt(github)/ul/kak-lsp/rc"
pathogen-infect "%opt(github)/ul/kak-tree"

lsp-enable

# Color scheme ─────────────────────────────────────────────────────────────────

colorscheme dracula

# Options ──────────────────────────────────────────────────────────────────────

set-option global ui_options ncurses_status_on_top=yes ncurses_assistant=cat ncurses_enable_mouse=no
set-option global autoreload yes
set-option global scrolloff 3,5
set-option global tabstop 2
set-option global indentwidth 2
set-option global makecmd 'make --jobs=8'
set-option global grepcmd 'rg --column --with-filename'
set-option global connect_shell elvish

set-option -add global auto_pairs “ ” ‘ ’ « » ‹ ›
set-option -add global snippets '->' '→'
set-option -add global snippets '<-' '←'
set-option -add global snippets '^' '↑'
set-option -add global snippets 'v' '↓'

add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces

hook global WinCreate .* %{
  phantom-enable
  search-highlighter-enable
  volatile-highlighter-enable
  space-indent-enable
  auto-pairs-enable
  snippets-enable
}

# Primary cursor face:
# Normal: Cyan
# Insert: Green
hook global ModeChange '.+:normal' %(face global PrimaryCursor 'black,cyan')
hook global ModeChange '.+:insert' %(face global PrimaryCursor 'black,green')

hook -group info-buffers global WinDisplay .* %{
  info-buffers
}

# Status line ──────────────────────────────────────────────────────────────────

set-option global modelinefmt '{{mode_info}} {default+b}%opt{block_auto_pairs}{default} {blue}%opt{block_flags}{default} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}'

# Flags

declare-option -hidden str block_flags

define-command -hidden block-update-flags %{ evaluate-commands %sh{
  eval "set -- $kak_opt_flags"
  if test $# != 0; then
    text=[$@]
  else
    text="''"
  fi
  echo set-option window block_flags "'$text'"
}}

hook global WinSetOption flags=.+ block-update-flags

# Auto-pairs

declare-option -hidden str block_auto_pairs

define-command -hidden block-update-auto-pairs %{ evaluate-commands %sh{
  if [ $kak_opt_auto_pairs_surround_enabled = true ]; then
    text=surround
  else
    text="''"
  fi
  echo set-option window block_auto_pairs $text
}}

hook global WinCreate .* %{
  hook window ModeChange 'normal:insert|insert:normal' block-update-auto-pairs
}

# Commands ─────────────────────────────────────────────────────────────────────

define-command scratch -params .. -docstring 'Create a scratch buffer (Default: *scratch*)' %{
  edit -scratch %sh(echo "${@:-*scratch*}")
}

define-command read -params .. -file-completion -docstring 'Create a buffer in read-only mode (Default: Current)' %{
  edit -readonly %sh(echo "${@:-$kak_bufname}")
}

define-command find-edit -params 1 -shell-script-candidates 'fd --type file' 'edit %arg(1)'
define-command find-edit-all -params 1 -shell-script-candidates 'fd --no-ignore --type file' 'edit %arg(1)'

define-command git-edit -params 1 -shell-script-candidates 'git ls-files' 'edit %arg(1)'

define-command git-edit-force 'edit!; git checkout'

define-command gist -params .. %{ echo %sh{
  printf %s "$kak_selection" | gist --open $@
}}

define-command chmod -params .. %{ echo %sh{
  chmod $@ $kak_buffile
}}

# Capitalize

declare-option str-list capitalize_selections

define-command capitalize -docstring 'Capitalize selections' %{
  set-option window capitalize_selections %val(selections_desc)
  execute-keys -draft '<a-:><a-;>L`h~'
  select %opt(capitalize_selections)
}

define-command grep-period -params 4.. -docstring 'grep-period <pattern> <format> <time-start> <time-end> [argument…]: Grep period' %{ evaluate-commands %sh{
  pattern=$1
  format=$2
  start=$3
  end=$4
  shift 4
  factory=day
  format="($pattern.+$format)|($format.+$pattern)"
  regex=$(
    chronic-period "$format" "$start" "$end" "$factory" |
    paste --serial --delimiters '|'
  )
  printf "grep '%s' %s" "$regex" "$@"
}}

# Flag

define-command flag -params .. -shell-script-candidates 'eval "set -- $kak_opt_flags"; printf ''%s\n'' $@' -docstring 'Flag buffer' 'set-option buffer flags %arg(@)'
define-command unflag -docstring 'Unflag buffer' 'unset-option buffer flags'
define-command pin -docstring 'Pin buffer' 'set-option buffer flags pinned'
define-command delete-buffer-unpinned -docstring 'Delete unpinned buffers' 'evaluate-commands-flag \A(?!pinned) delete-buffer'
define-command mark -docstring 'Mark buffer' 'set-option buffer flags marked'
define-command play-macro-marked -docstring 'Play macro on marked buffers' 'execute-keys-flag marked q'

# Aliases ──────────────────────────────────────────────────────────────────────

alias global s scratch
alias global r read
alias global f find-edit
alias global fa find-edit-all
alias global g git
alias global ge git-edit
alias global ge! git-edit-force
alias global fac find-apply-changes
alias global p portal
alias global t connect-terminal
alias global df distraction-free-toggle
alias global pn pad-number

# Buffers
alias global bd delete-buffer
alias global bf buffer-first
alias global bl buffer-last
alias global bo buffer-only
alias global bo! buffer-only-force

# Flag
alias global dbu delete-buffer-unpinned
alias global pmm play-macro-marked

# Git
define-command gw -docstring 'git add' 'write; git add'
define-command gS -docstring 'git show' 'git show'
define-command gs -docstring 'git diff' 'git diff %val(buffile)'
define-command gc -docstring 'git commit' 'git commit'
define-command gr -docstring 'git amend' 'git commit --amend'
define-command gE -docstring 'git checkout' 'git checkout'

# Quick editing
define-command ek -docstring 'Open Kakoune configuration file' 'edit ~/.config/kak/kakrc'
define-command en -docstring 'Open NixOS configuration file' 'edit /etc/nixos/configuration.nix'
define-command et -docstring 'Open tmux configuration file' 'edit ~/.tmux.conf'
define-command eg -docstring 'Open Git configuration file' 'edit ~/.config/git/config'
define-command e3 -docstring 'Open i3 configuration file' 'edit ~/.config/i3/config'
define-command elv -docstring 'Open Elvish configuration file' 'edit ~/.elvish/rc.elv'
define-command ea -docstring 'Open Alacritty configuration file' 'edit ~/.config/alacritty/alacritty.yml'
define-command em -docstring 'Open mpv configuration file' 'edit ~/.config/mpv/mpv.conf'
define-command emi -docstring 'Open mpv input configuration file' 'edit ~/.config/mpv/input.conf'
define-command elf -docstring 'Open lf configuration file' 'edit ~/.config/lf/lfrc'
define-command ed -docstring 'Open diary file' "edit ~/documents/diary/%sh(date +%Y).md"
define-command ep -docstring 'Open passwords file' 'edit ~/.config/passwords.yml'
define-command ew -docstring 'Open words file' 'edit ~/documents/words'

# Mappings ─────────────────────────────────────────────────────────────────────

# Type <character><character> to leave insert mode.
# ['jj', 'kk']
hook global InsertChar '[jk]' %{ try %{
  execute-keys -draft "hH<a-k>%val(hook_param)%val(hook_param)<ret>d"
  execute-keys <esc>
}}

# Move macros to ^
map global normal ^ q
map global normal <a-^> Q

# Move b to q, so that
# q, w, e actions are aligned
word-movement-map previous q
word-movement-map next w

# Buffers
map global normal b ':<space>buffer<ret>'
map global normal B ':<space>enter-user-mode -lock buffers<ret>'

# Yanks
map global normal Y ':<space>yank-ring<ret>'

map global normal <ret> :
map global normal <backspace> ';'
map global normal <tab> '<a-;>'
map global normal <a-tab> '<a-:>'

map global normal <c-a> ga
map global normal <c-n> :buffer-next<ret>
map global normal <c-p> :buffer-previous<ret>

map global normal "'" ':move-line-below %val(count)<ret>'
map global normal "<a-'>" ':move-line-above %val(count)<ret>'

map global normal '#' :comment-line<ret>

map global normal <a-`> :capitalize<ret>

map global normal = -docstring 'Prompt for bc' ':<space>bc-prompt<ret>'
map global normal + -docstring 'Repeat last bc command' ':<space>bc-prompt<ret><up><ret>'

# Tree-sitter

map global normal <up> ':<space>tree-select-parent-node<ret>'
map global normal <down> ':<space>tree-select-children<ret>'
map global normal <right> ':<space>tree-select-next-node<ret>'
map global normal <left> ':<space>tree-select-previous-node<ret>'

# User mappings

map global normal , <space>
map global normal <space> ,
map global user <space> -docstring 'Clear selections' <space>

map global user <ret> -docstring 'LSP' ':<space>enter-user-mode lsp<ret>'

map global user b -docstring 'Open Chrome' '<a-|>xargs --replace chromium {}<ret>'
map global user c -docstring 'Chronic (YYYY-MM-DD)' ':<space>chronic-prompt<ret>%F<ret>'
map global user C -docstring 'Prompt for Chronic' ':<space>chronic-prompt<ret>'
map global user r -docstring 'Replace' ':<space>replace<ret>'
map global user s -docstring 'Surround' ':<space>auto-pairs-surround<ret>'
map global user S -docstring 'Surround++' ':<space>auto-pairs-surround _ _ * *<ret>'
map global user t -docstring 'Translate' '|deepl translate --targetLanguage=FR<ret>'
map global user | -docstring 'Sort' '|sort<ret>'

# Paste
map global user p -docstring 'Paste (After)' '<a-!>xclip -out -selection clipboard<ret>'
map global user P -docstring 'Paste (Before)' '!xclip -out -selection clipboard<ret>'
map global user R -docstring 'Replace' '|xclip -out -selection clipboard<ret>'

# Highlighters
map global user l -docstring 'Line numbers' ':toggle-highlighter window/ number-lines<ret>'
map global user w -docstring 'Wrap' ':toggle-highlighter window/ wrap -word<ret>'

# Hooks ────────────────────────────────────────────────────────────────────────

# Auto-mkdir
hook global BufWritePre .* %{
  nop %sh{
    directory=$(dirname "$kak_hook_param")
    mkdir --parents "$directory"
  }
}

# Clipboard
hook global NormalKey '[ydc]' %{
  nop %sh{
    (printf '%s' "$kak_main_reg_dquote" | xclip-selection) < /dev/null > /dev/null 2>&1 &
  }
}

# File-types ───────────────────────────────────────────────────────────────────

# Kakoune

hook global WinSetOption filetype=kak %{
  set-option -add window snippets def 'define-command X %{X}<esc><a-/>X<ret><a-n>c'
}

# Highlighters ─────────────────────────────────────────────────────────────────

hook global WinSetOption filetype=.+ %{ try %{
  # Works with show-whitespaces highlighter
  # Only show EOL
  # Whitespace characters still visible when selecting a region
  # RGB colors correspond to Dracula color scheme:
  # Background: Black
  # Background (Dimmed): Gray
  add-highlighter window/ regex ' +' 0:rgb:282a36 # Whitespaces
  add-highlighter window/ regex '\n+' 0:rgb:44475a # New lines
  add-highlighter window/ regex '\h+$' 0:red # Trailing whitespaces
  add-highlighter window/ regex ' +' 0:red # Non-breaking spaces
  add-highlighter window/ regex '(?<=[?!.…])\h(\h{2,})?(?=\w)' 0:red # A sentence not followed by exactly two spaces
  add-highlighter window/ regex '(?<=[?!.…])(\h{2})?(?=\w)' 0:green # A sentence followed by exactly two spaces
  add-highlighter window/ regex '(?<=…)\h(?=[a-z])' 0:green # Suspension points
  add-highlighter window/ regex '(?<=\w)\h{2,}' 0:red # A word character followed by more than two spaces
  add-highlighter window/ regex 'Mrs?\.\K\h(?=\w)' 0:green # Mr. and Mrs.
  add-highlighter window/ regex "(?<=\w)'(?=\w)" 0:red # Apostrophe
  add-highlighter window/ regex '‐+' 0:red # Césures
  add-highlighter window/ regex '‑+' 0:green # Range of values
  add-highlighter window/ regex '–+' 0:green # Unicode 2013
  add-highlighter window/ regex '—+' 0:yellow # Unicode 2014
  add-highlighter window/ regex '―+' 0:red # Unicode 2015
  add-highlighter window/ regex '−+' 0:cyan # Subtractions
  add-highlighter window/ regex '×+' 0:cyan # Multiplications
  add-highlighter window/ regex '[“‘]+' 0:cyan # Opening quotation marks
  add-highlighter window/ regex '[”]+' 0:cyan+u # Closing quotation marks
}}

# Modes ────────────────────────────────────────────────────────────────────────

# Directory ────────────────────────────────────────────────────────────────────

define-command -hidden -override explore-files-recursive -params 0..1 %{
  explore-files-display "fd %sh(test $kak_opt_explore_show_hidden = true && echo --hidden)" %arg(1)
}

# GTD ──────────────────────────────────────────────────────────────────────────

add-highlighter shared/gtd regions
add-highlighter shared/gtd/code default-region group
add-highlighter shared/gtd/action region '^(To do|Done|Cancelled|Aborted|Waiting|Try)' '$' group
add-highlighter shared/gtd/state region '^(Status|Rule|Constat|Habits|Fixed point)' '$' group
add-highlighter shared/gtd/time region '^(Scheduled|Deadline)' '$' group

add-highlighter shared/gtd/code/ regex '^[A-Z][a-z]+(?=:)' 0:variable
add-highlighter shared/gtd/code/ regex '\b(How to|Fix(es)?)\b' 0:value

add-highlighter shared/gtd/action/ regex 'To do|[A-Z][a-z]+' 0:value
add-highlighter shared/gtd/action/ regex '(To do|[A-Z][a-z]+) ([A-Z][a-z]+|Go to)' 2:comment
add-highlighter shared/gtd/action/ regex '(To do|[A-Z][a-z]+) (Now)' 2:type
add-highlighter shared/gtd/action/ regex 'Done|Cancelled|Aborted|Waiting' 0:comment
add-highlighter shared/gtd/action/ regex 'Postponed' 0:type

add-highlighter shared/gtd/state/ regex 'Fixed point|[A-Z][a-z]+' 0:value

add-highlighter shared/gtd/time/ regex 'Scheduled|Deadline' 0:comment

define-command -hidden switch-to-do-done %{ try %{
  execute-keys "<space>;<a-x>sTo do<ret>cDone(%sh(date +'%F %T'))<esc>h<a-a>b"
}}

define-command -hidden switch-to-do-cancelled %{ try %{
  execute-keys "<space>;<a-x>sTo do<ret>cCancelled(%sh(date +'%F %T'))<esc>"
  execute-keys 'o<ret>Reason:<space>'
}}

define-command gtd-grep-daily %(grep-period 'To do' '%F' today today)
define-command gtd-grep-weekly %(grep-period 'To do' '%F' today week)

declare-user-mode gtd-grep

map global gtd-grep t -docstring 'To do' ":grep 'To do'<ret>"
map global gtd-grep s -docstring 'Scheduled' ":grep Scheduled<ret>"
map global gtd-grep u -docstring 'Deadline' ":grep Deadline<ret>"
map global gtd-grep h -docstring '+Hour' ":grep '\+\d+H'<ret>"
map global gtd-grep d -docstring '+Day' ":grep '\+\d+D'<ret>"
map global gtd-grep w -docstring '+Week' ":grep '\+\d+W'<ret>"
map global gtd-grep m -docstring '+Month' ":grep '\+\d+M'<ret>"
map global gtd-grep y -docstring '+Year' ":grep '\+\d+Y'<ret>"

hook global WinCreate '.*/diary/\d{4}\.md' %{
  add-highlighter window/ ref gtd
}

hook global BufOpenFile '.*/diary/\d{4}\.md' %{
  set-option -add buffer snippets td 'To do '
  set-option -add buffer snippets tb 'To do Buy '
  set-option -add buffer snippets tc 'To do Call '
  set-option -add buffer snippets tg 'To do Go to '
  set-option -add buffer snippets tr 'To do Read '
  set-option -add buffer snippets tw 'To do Watch '
  alias buffer td gtd-grep-daily
  alias buffer tw gtd-grep-weekly
  map buffer normal <a-d> '/%sh(date +%F.%a)<a-!><ret>:set-register / "^# \K\d{4}-\d{2}-\d{2}\.\w{3}"<ret>'
  map buffer normal <c-d> :switch-to-do-done<ret>
  map buffer normal <c-u> :switch-to-do-cancelled<ret>
  map buffer normal <a-g> ':enter-user-mode gtd-grep<ret>'
  map buffer insert <c-y> '<a-;>|date +%F<ret>'
  map buffer insert <c-u> '<a-;>|date +%R<ret>'
}

hook global BufOpenFile ".*/diary/%sh(date +%Y)\.md" %{
  hook -once buffer NormalIdle .* %{
    evaluate-commands %sh(printf "execute-keys '/^# %s$<ret>'" $(date +%F.%a))
    execute-keys '<a-i><a-w>vv'
    set-register / '^# \K\d{4}-\d{2}-\d{2}\.\w{3}'
  }
}
