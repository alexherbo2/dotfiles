# Plugins ──────────────────────────────────────────────────────────────────────

source ~/projects/auto-pairs.kak/rc/auto-pairs.kak
source ~/projects/bc.kak/rc/bc.kak
source ~/projects/change-directory.kak/rc/change-directory.kak
source ~/projects/chronic.kak/rc/chronic.kak
source ~/projects/connect.kak/rc/connect.kak
source ~/projects/connect.kak/rc/modules/fzf.kak
source ~/projects/connect.kak/rc/modules/rofi.kak
source ~/projects/connect.kak/rc/modules/lf.kak
source ~/projects/connect.kak/rc/modules/dolphin.kak
source ~/projects/explore.kak/rc/explore-files.kak
source ~/projects/explore.kak/rc/explore-buffers.kak
source ~/projects/mkdir.kak/rc/mkdir.kak
source ~/projects/move-line.kak/rc/move-line.kak
source ~/projects/objectify.kak/rc/objectify.kak
source ~/projects/pad-number.kak/rc/pad-number.kak
source ~/projects/palette.kak/rc/palette.kak
source ~/projects/phantom.kak/rc/phantom.kak
source ~/projects/replace-mode.kak/rc/replace-mode.kak
source ~/projects/search-highlighter.kak/rc/search-highlighter.kak
source ~/projects/snippets.kak/rc/snippets.kak
source ~/projects/space-indent.kak/rc/space-indent.kak
source ~/projects/split-object.kak/rc/split-object.kak
source ~/projects/toggle-highlighter.kak/rc/toggle-highlighter.kak
source ~/projects/volatile-highlighter.kak/rc/volatile-highlighter.kak
source ~/projects/word-movement.kak/rc/word-movement.kak
source ~/projects/yank-ring.kak/rc/yank-ring.kak
source ~/repositories/github.com/Delapouite/kakoune-buffers/buffers.kak
source ~/repositories/github.com/Delapouite/kakoune-text-objects/text-objects.kak
source ~/repositories/github.com/occivink/kakoune-find/find.kak
source ~/repositories/github.com/occivink/kakoune-sudo-write/sudo-write.kak
source ~/repositories/github.com/occivink/kakoune-vertical-selection/vertical-selection.kak
source ~/repositories/github.com/ul/kak-lsp/rc/lsp.kak
source ~/repositories/gitlab.com/Screwtapello/kakoune-state-save/state-save.kak

lsp-enable

# Options ──────────────────────────────────────────────────────────────────────

set-option -add global ui_options ncurses_status_on_top=yes
set-option -add global ui_options ncurses_assistant=cat
set-option -add global ui_options ncurses_enable_mouse=no
set-option -add global ui_options ncurses_set_title=no

set-option global autoreload yes
set-option global scrolloff 3,5
set-option global tabstop 2
set-option global indentwidth 2
set-option global makecmd 'make -j 8'
set-option global grepcmd 'rg --column --with-filename'

hook global ModuleLoaded x11 %{
  set-option global termcmd 'alacritty --command dash -c'
}

add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces

hook global WinCreate .* %{
  phantom-enable -with-maps
  search-highlighter-enable
  volatile-highlighter-enable
  space-indent-enable
  auto-pairs-enable
}

# Fix Hugo LiveReload
hook global BufCreate '.*/(content|layouts|static)/.*|.*/config\.toml' %{
  set-option buffer writemethod replace
}

# Color scheme ─────────────────────────────────────────────────────────────────

# Dracula – A dark theme (https://draculatheme.com)
declare-option str background 'rgb:282a36'
declare-option str dimmed_background 'rgb:44475a'
declare-option str foreground 'rgb:f8f8f2'
declare-option str orange 'rgb:ffb86c'
declare-option str purple 'rgb:bd93f9'
declare-option str yellow 'rgb:f1fa8c'

define-command colorscheme-dracula-transparent %{
  colorscheme dracula
  set-face global Default %opt{foreground}
  set-face global LineNumbers %opt{dimmed_background}
  set-face global LineNumberCursor "%opt{foreground}+b"
  set-face global LineNumbersWrapped "%opt{dimmed_background}+i"
  set-face global Information %opt{yellow}
  set-face global StatusLine %opt{foreground}
  set-face global StatusLineInfo %opt{purple}
  set-face global StatusLineValue %opt{orange}
  set-face global BufferPadding %opt{dimmed_background}
  set-face global Whitespace %opt{dimmed_background}
  set-face global Phantom "%opt{foreground},%opt{dimmed_background}"
}

colorscheme-dracula-transparent

# Status line ──────────────────────────────────────────────────────────────────

set-option global modelinefmt '{{mode_info}} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}'

# Commands ─────────────────────────────────────────────────────────────────────

define-command scratch %{
  edit -scratch '*scratch*'
}

define-command read-only %{
  edit -readonly %val{bufname}
}

define-command git-write %{
  write
  git add
}

define-command git-commit %{
  git commit
}

define-command git-amend %{
  git commit --amend
}

define-command find-edit -params 1 -shell-script-candidates 'fd --type file' %{
  edit %arg{1}
}

define-command find-edit-all -params 1 -shell-script-candidates 'fd --no-ignore --type file' %{
  edit %arg{1}
}

define-command chmod -params .. %{
  echo %sh{
    chmod "$@" "$kak_buffile"
  }
}

define-command capitalize-selections %{
  evaluate-commands -save-regs 's' %{
    set-register s %val{selections_desc}
    execute-keys -draft '<a-:><a-;>L`h~'
    select %reg{s}
  }
}

define-command markdown-sort-links-by-url %{
  execute-keys '<a-x><a-s>gimw<a-e>yI[<c-r>"]<esc><a-x><a-_>|sort<ret><a-s>gimd<a-x><a-_>'
}

# Aliases ──────────────────────────────────────────────────────────────────────

alias global s scratch
alias global ro read-only
alias global f find-edit
alias global fa find-edit-all

# Rename buffers, clients and sessions
alias global nb rename-buffer
alias global nc rename-client
alias global ns rename-session

# Grep
alias global gn grep-next-match
alias global gp grep-previous-match

# Git
alias global g git
alias global gw git-write
alias global gc git-commit
alias global gr git-amend

# Quick editing
define-command ek 'edit ~/.config/kak/kakrc'
define-command ekr 'edit ~/.config/krabby/config.js'
define-command en 'edit /etc/nixos/configuration.nix'
define-command et 'edit ~/.tmux.conf'
define-command eg 'edit ~/.config/git/config'
define-command ewm 'edit ~/.config/sway/config'
define-command elv 'edit ~/.elvish/rc.elv'
define-command eterm 'edit ~/.config/alacritty/alacritty.yml'
define-command em 'edit ~/.config/mpv/mpv.conf'
define-command emi 'edit ~/.config/mpv/input.conf'
define-command elf 'edit ~/.config/lf/lfrc'
define-command ed %(edit "~/documents/diary/%sh(date '+%Y').md")
define-command es 'edit ~/.config/snippets.yml'
define-command ep 'edit ~/.config/passwords.yml'
define-command ew 'edit ~/documents/words.txt'

# Mappings ─────────────────────────────────────────────────────────────────────

map global normal <ret> :
map global normal <backspace> ';'
map global normal <tab> '<a-;>'
map global normal <a-tab> '<a-:>'

map global normal '#' ': comment-line<ret>'
map global normal <a-`> ': capitalize-selections<ret>'

# Type <character><character> to leave insert mode.
# ["jj", "kk"]
hook global InsertChar '[jk]' %{
  try %{
    execute-keys -draft "hH<a-k>%val{hook_param}%val{hook_param}<ret>d"
    execute-keys <esc>
  }
}

# Create a new window
map global normal <c-n> ': new<ret>'

# Move macros to ^
map global normal ^ q
map global normal <a-^> Q

# Buffers
map global normal b ': fzf-buffers<ret>'
map global normal B ': enter-user-mode -lock buffers<ret>'
map global normal <c-a> ga

# User mappings ────────────────────────────────────────────────────────────────

# User mapping
map global normal , <space>
map global normal <space> ,

# LSP
map global user <ret> ': enter-user-mode lsp<ret>'

# Browser
map global user b '<a-|>xargs -I {} chromium {}<ret>'

# Pad numbers
map global user 0 ': pad-number %val{count}<ret>' -docstring 'Pad numbers with leading zeros'

# Sort
map global user | '|sort<ret>'

# Paste
map global user p '<a-!>wl-paste --no-newline<ret>'
map global user P '!wl-paste --no-newline<ret>'
map global user R '|wl-paste --no-newline<ret>'

# Enter replace mode
map global user r ': enter-replace-mode<ret>' -docstring 'Enter replace mode'

# Surround
map global user s ': auto-pairs-surround <lt> <gt><ret>'
map global user S ': auto-pairs-surround <lt> <gt> _ _ * *<ret>'

# Chronic
map global user c ': chronic-prompt<ret>%F<ret>'
map global user C ': chronic-prompt<ret>'

# Toggle highlighters
map global user l ': toggle-highlighter global/ number-lines<ret>'
map global user w ': toggle-highlighter global/ wrap -word<ret>'

# Hooks ────────────────────────────────────────────────────────────────────────

# Clipboard
hook global NormalKey '[ydc]' %{
  nop %sh{
    wl-copy "$kak_main_reg_dquote" < /dev/null > /dev/null 2>&1 &
  }
}

# Plugins ──────────────────────────────────────────────────────────────────────

# bc ───────────────────────────────────────────────────────────────────────────

map global normal = ': bc-prompt<ret>'
map global normal + ': bc-prompt<ret><up><ret>'

# change-directory ─────────────────────────────────────────────────────────────

define-command change-directory-project-root %{
  change-directory-buffer
  try change-directory-git
}

alias global cd! change-directory-project-root

# connect ──────────────────────────────────────────────────────────────────────

require-module connect-fzf
require-module connect-rofi
require-module connect-lf
require-module connect-dolphin

map global normal <c-t> ': connect-terminal<ret>'

# Explore ──────────────────────────────────────────────────────────────────────

# Explore files and buffers with fzf
set-option global explore_files_command fzf-files
set-option global explore_buffers_command fzf-buffers

# mkdir ────────────────────────────────────────────────────────────────────────

hook global BufWritePre .* %{
  mkdir-buffer
}

# move-line ────────────────────────────────────────────────────────────────────

map global normal "'" ': move-line-below<ret>'
map global normal "<a-'>" ': move-line-above<ret>'

# Snippets ─────────────────────────────────────────────────────────────────────

hook global WinCreate .* %{
  snippets-enable
}

# Generate snippets on-demand using snippets-generate-config and snippets-source-config.

hook global KakBegin .* %{
  snippets-source-config
}

define-command snippets-source-config %{
  try %{
    source "%val{client_env_XDG_CACHE_HOME}/kak/snippets.kak"
  }
}

define-command snippets-generate-config %{
  # Ensure ~/.cache/kak exists
  nop %sh{
    mkdir -p "$XDG_CACHE_HOME/kak"
  }
  # Snippets from file using Crystal
  # File: ~/.config/snippets.yml
  echo -to-file "%val{client_env_XDG_CACHE_HOME}/kak/snippets.kak" %sh{
    cat <<'EOF' | crystal eval
      require "yaml"
      class String
        def shell_escape
          "'" + self.gsub("'", %('"'"')) + "'"
        end
      end
      yaml = File.open(File.join(ENV["XDG_CONFIG_HOME"], "snippets.yml")) do |file|
        Hash(String, String).from_yaml(file)
      end
      yaml.each do |snippet, expansion|
        puts "
          set-option -add global snippets #{snippet.shell_escape} #{expansion.shell_escape}
          set-option -add global static_words #{snippet.shell_escape}
        "
      end
EOF
  }
}

# split-object ─────────────────────────────────────────────────────────────────

map global normal <a-I> ': enter-user-mode split-object<ret>'

# state-save ───────────────────────────────────────────────────────────────────

hook global KakBegin .* %{
  state-save-reg-sync colon
  state-save-reg-sync pipe
  state-save-reg-sync slash
}

hook global KakEnd .* %{
  state-save-reg-sync colon
  state-save-reg-sync pipe
  state-save-reg-sync slash
}

hook global FocusOut .* %{
  state-save-reg-save dquote
}

hook global FocusIn .* %{
  state-save-reg-load dquote
}

# word-movement ────────────────────────────────────────────────────────────────

# Move b to q, so that [qwe] actions are aligned.
word-movement-map previous q
word-movement-map next w
word-movement-map skip e

# yank-ring ────────────────────────────────────────────────────────────────────

map global normal Y ': yank-ring<ret>'

# show-characters ──────────────────────────────────────────────────────────────

set-face global ShowCharactersBackground %opt{background}
set-face global ShowCharactersDimmedBackground %opt{dimmed_background}

# Hook on filetype is required
hook global WinSetOption filetype=.* %{
  require-module show-characters
  add-highlighter window/ ref show-characters
  hook -always -once window WinSetOption filetype=.* %{
    remove-highlighter window/show-characters
  }
}

provide-module show-characters %{
  add-highlighter shared/show-characters regions
  add-highlighter shared/show-characters/code default-region group
  add-highlighter shared/show-characters/code/whitespace regex '\h+' 0:ShowCharactersBackground
  add-highlighter shared/show-characters/code/newline regex '\n+' 0:ShowCharactersDimmedBackground
  add-highlighter shared/show-characters/code/trailing-whitespaces regex '\h+$' 0:red
  add-highlighter shared/show-characters/code/non-breaking-space regex ' +' 0:red
  add-highlighter shared/show-characters/code/not-two-spaces-after-sentence regex '[?!.…]\K\h(\h{2,})?(?=\w)' 0:red
  add-highlighter shared/show-characters/code/two-spaces-after-sentence regex '[?!.…]\K\h{2}(?=\w)' 0:green
  add-highlighter shared/show-characters/code/multiple-whitespaces-after-word regex '\w\K\h{2,}' 0:red
  add-highlighter shared/show-characters/code/apostrophe regex '\w\K''(?=\w)' 0:red
  add-highlighter shared/show-characters/code/cesure regex '‐+' 0:red
  add-highlighter shared/show-characters/code/range-of-values regex '‑+' 0:blue
  add-highlighter shared/show-characters/code/u+2013 regex '–+' 0:green
  add-highlighter shared/show-characters/code/u+2014 regex '—+' 0:green+b
  add-highlighter shared/show-characters/code/u+2015 regex '―+' 0:red
  add-highlighter shared/show-characters/code/math regex '[−×]+' 0:cyan
  add-highlighter shared/show-characters/code/opening-quotation-mark regex '[“‘]+' 0:cyan
  add-highlighter shared/show-characters/code/closing-quotation-mark regex '”+' 0:cyan+u
}

# GTD ──────────────────────────────────────────────────────────────────────────

declare-option bool gtd

hook global BufCreate '.*/diary/\d{4}\.md' %{
  set-option buffer gtd yes
}

hook global WinSetOption gtd=true %{

  require-module gtd
  evaluate-commands set-option window static_words %opt{gtd_keywords}
  add-highlighter window/ ref gtd

  alias window gtd gtd-grep-todo
  alias window g+ gtd-grep-scheduled
  alias window g! gtd-grep-deadline
  alias window g+h gtd-grep-hourly
  alias window g+d gtd-grep-daily
  alias window g+w gtd-grep-weekly
  alias window g+m gtd-grep-monthly
  alias window g+y gtd-grep-yearly

  alias window td gtd-chronic-grep-today
  alias window tw gtd-chronic-grep-week

  map window normal <a-d> ': gtd-jump-to-day<ret>'
  map window normal <c-d> ': gtd-todo-done<ret>'
  map window normal <c-u> ': gtd-todo-cancelled<ret>'
  map window insert <c-y> '<a-;>: gtd-insert-date<ret>'
  map window insert <c-u> '<a-;>: gtd-insert-time<ret>'

  hook -always -once window WinSetOption gtd=false %{
    remove-highlighter window/gtd
  }
}

provide-module gtd %{
  declare-option -hidden str-list gtd_keywords 'Aborted' 'Buy' 'Call' 'Cancelled' 'Constat' 'Day' 'Days' 'Deadline' 'Done' 'Fix' 'Fixed point' 'Fixes' 'Go to' 'Habits' 'Hour' 'Hours' 'How to' 'Month' 'Months' 'Postponed' 'Read' 'Reason' 'Rule' 'Scheduled' 'Status' 'To do' 'Try' 'Waiting' 'Watch' 'Week' 'Weeks' 'Year' 'Years'

  add-highlighter shared/gtd regions
  add-highlighter shared/gtd/code default-region group

  evaluate-commands %sh{
    # Keywords
    eval "set -- $kak_quoted_opt_gtd_keywords"
    regex="\\b(?:\\Q$1\\E"
    shift
    for keyword do
      regex="$regex|\\Q$keyword\\E"
    done
    regex="$regex)\\b"
    printf "add-highlighter shared/gtd/code/keywords regex '%s' 0:keyword\n" "$regex"
  }

  define-command gtd-jump-to-day %{
    set-register / "^# \K%sh(date '+%F\.%a')$"
    execute-keys '<space>n'
    set-register / '^# \K\d{4}-\d{2}-\d{2}\.\w{3}$'
  }

  define-command gtd-todo-done %{
    execute-keys -draft '<a-x>sTo do<ret>cDone<esc>'
  }

  define-command gtd-todo-cancelled %{
    execute-keys -draft '<a-x>sTo do<ret>cCancelled<esc>'
  }

  define-command gtd-grep-todo %(grep 'To do')
  define-command gtd-grep-scheduled %(grep 'Scheduled')
  define-command gtd-grep-deadline %(grep 'Deadline')
  define-command gtd-grep-hourly %(grep '\+\d+Hours?')
  define-command gtd-grep-daily %(grep '\+\d+Days?')
  define-command gtd-grep-weekly %(grep '\+\d+Weeks?')
  define-command gtd-grep-monthly %(grep '\+\d+Months?')
  define-command gtd-grep-yearly %(grep '\+\d+Years?')

  define-command gtd-chronic-grep-today %(chronic-grep-period 'To do.+%F' today today day)
  define-command gtd-chronic-grep-week %(chronic-grep-period 'To do.+%F' today week day)

  define-command gtd-insert-date %(execute-keys -draft '!date ''+%F'' | tr -d ''\n''<ret>')
  define-command gtd-insert-time %(execute-keys -draft '!date ''+%R'' | tr -d ''\n''<ret>')
}
