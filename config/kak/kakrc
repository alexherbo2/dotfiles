# Modules ──────────────────────────────────────────────────────────────────────

# Require modules
require-module auto-pairs
require-module batch
require-module bc
require-module capitalize-selections
require-module change-directory
require-module chronic
require-module connect
require-module connect-broot
require-module connect-dolphin
require-module connect-fzf
require-module current-word-highlighter
require-module evaluate-selections
require-module explore-buffers
require-module explore-files
require-module jq
require-module manual-indent
require-module mkdir
require-module move-line
require-module objectify
require-module out-of-view
require-module pad-number
require-module palette
require-module phantom
require-module prelude
require-module rails
require-module search-highlighter
require-module snippets
require-module split-object
require-module surround
require-module terminal-mode
require-module text-objects
require-module toggle-highlighter
require-module type-expand
require-module volatile-highlighter
require-module word-select
require-module yank-ring
require-module yank-ring-connect

# Enable plugins
auto-pairs-enable
current-word-highlighter-enable
explore-buffers-enable
explore-files-enable
out-of-view-enable
palette-enable
phantom-enable
rails-detect
search-highlighter-enable
snippets-enable
volatile-highlighter-enable
yank-ring-enable

# Options ──────────────────────────────────────────────────────────────────────

set-option -add global ui_options ncurses_status_on_top=yes
set-option -add global ui_options ncurses_assistant=cat
set-option -add global ui_options ncurses_set_title=no

set-option global autoreload yes
set-option global scrolloff 3,5
set-option global tabstop 2
set-option global indentwidth 2
set-option global makecmd 'make -j 8'
set-option global grepcmd 'rg --column --with-filename'

hook global ModuleLoaded x11 %{
  set-option global termcmd 'alacritty --command dash -c'
}

# Create a new tmux window
hook global ModuleLoaded tmux %{
  alias global terminal tmux-terminal-window
}

add-highlighter global/number-lines number-lines
add-highlighter global/show-matching show-matching
add-highlighter global/show-whitespaces show-whitespaces

# Fix Hugo LiveReload
hook global BufCreate '.*/(content|layouts|static)/.*|.*/config\.toml' %{
  set-option buffer writemethod replace
}

# Color scheme ─────────────────────────────────────────────────────────────────

# Dracula – A dark theme (https://draculatheme.com)
define-command colorscheme-dracula-transparent %{
  colorscheme dracula
  set-face global Default %opt{foreground}
  set-face global LineNumbers %opt{dimmed_background}
  set-face global LineNumberCursor "%opt{foreground}+b"
  set-face global LineNumbersWrapped "%opt{dimmed_background}+i"
  set-face global Information %opt{yellow}
  set-face global StatusLine %opt{foreground}
  set-face global StatusLineInfo %opt{purple}
  set-face global StatusLineValue %opt{orange}
  set-face global BufferPadding %opt{dimmed_background}
  set-face global Whitespace %opt{dimmed_background}
}

colorscheme-dracula-transparent

# Status line ──────────────────────────────────────────────────────────────────

set-option global modelinefmt '{yellow}%opt{out_of_view_status_line}{default} {{mode_info}} {magenta}%val{client}{default} at {yellow}%val{session}{default} on {green}%val{bufname}{default} {{context_info}} {cyan}%val{cursor_line}{default}:{cyan}%val{cursor_char_column}{default}'

# Filetype-specific ────────────────────────────────────────────────────────────

# Grep
hook global WinSetOption filetype=grep %{
  map window normal <ret> ': grep-jump<ret>'
}

# Makefile
hook global WinSetOption filetype=makefile %{
  set-option window indentwidth 0
}

# Commands ─────────────────────────────────────────────────────────────────────

define-command scratch %{
  edit -scratch '*scratch*'
}

define-command scratch-reload %{
  edit! -scratch '*scratch*'
}

define-command read-only %{
  edit -readonly %val{bufname}
}

define-command git-write %{
  write
  git add
}

define-command git-write-force %{
  write
  nop %sh(git add --force "$kak_buffile")
  git add
}

define-command git-commit %{
  git commit
}

define-command git-amend %{
  git commit --amend
}

define-command find-edit -params 1 -shell-script-candidates 'fd --type file' %{
  edit %arg{1}
}

define-command find-edit-all -params 1 -shell-script-candidates 'fd --hidden --no-ignore --type file' %{
  edit %arg{1}
}

define-command chmod -params .. %{
  echo %sh{
    chmod "$@" "$kak_buffile"
  }
}

define-command markdown-sort-links-by-url %{
  execute-keys '<a-x><a-s>gimw<a-e>yI[<c-r>"]<esc><a-x><a-_>|sort<ret><a-s>gimd<a-x><a-_>'
}

# Aliases ──────────────────────────────────────────────────────────────────────

alias global s scratch
alias global s! scratch-reload
alias global ro read-only
alias global f find-edit
alias global fa find-edit-all

# Rename buffers, clients and sessions
alias global nb rename-buffer
alias global nc rename-client
alias global ns rename-session

# Grep
alias global gn grep-next-match
alias global gp grep-previous-match

# Git
alias global g git
alias global gw git-write
alias global gw! git-write-force
alias global gc git-commit
alias global gr git-amend

# Quick editing
define-command ek 'edit ~/.config/kak/kakrc'
define-command ekr 'edit ~/.config/krabby/config.js'
define-command en 'edit /etc/nixos/configuration.nix'
define-command et 'edit ~/.tmux.conf'
define-command eg 'edit ~/.config/git/config'
define-command ewm 'edit ~/.config/sway/config'
define-command eWM 'edit ~/.config/wayfire.ini'
define-command elv 'edit ~/.elvish/rc.elv'
define-command eterm 'edit ~/.config/alacritty/alacritty.yml'
define-command em 'edit ~/.config/mpv/mpv.conf'
define-command emi 'edit ~/.config/mpv/input.conf'
define-command ebr 'edit ~/.config/broot/conf.toml'
define-command ed %(edit "~/documents/diary/%sh(date '+%Y').md")
define-command ep 'edit ~/.config/passwords.yml'
define-command ew 'edit ~/documents/words.txt'

# Mappings ─────────────────────────────────────────────────────────────────────

map global normal <ret> :
map global normal <backspace> ';'
map global normal <tab> '<a-;>'
map global normal <a-tab> '<a-:>'

# Prompt
map global prompt -docstring 'Expand the typed expansions in currently entered text' <a-tab> <a-!>
map global prompt -docstring 'Expand the typed expansions in currently entered text and validate' <a-ret> <a-!><ret>

# Search
# Case insensitive search
map global prompt <a-i> '<home>(?i)<end>'
map global prompt <a-I> '<up><home>(?i)<end>'

# Plain text search
map global prompt <a-q> '<home>\Q<end>'
map global prompt <a-Q> '<up><home>\Q<end>'

# Paths
# Buffer file and directory paths
map global prompt <a-/> '<c-r>%'
map global prompt <a-?> '%sh(dirname "$kak_bufname")<a-!>/'

# Comment
map global normal '#' ': comment-line<ret>'

# Case
map global normal <a-`> ': capitalize-selections<ret>'

# Type <character><character> to leave insert mode.
# ["jj", "kk"]
hook global InsertChar '[jk]' %{
  try %{
    execute-keys -draft "hH<a-k>%val{hook_param}%val{hook_param}<ret>d"
    execute-keys <esc>
  }
}

# Select all occurrences of the current selection set.
map global normal <a-percent> '*%s<ret>'

# Quit
map global normal <c-q> ': quit!<ret>'

# Buffers
map global normal <c-a> ga

# Move macros to ^
map global normal ^ q
map global normal <a-^> Q

# User mappings ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# User mapping
map global normal , <space>
map global normal <space> ,

# Browser
map global user -docstring 'Browser' b '<a-|>xargs -I {} chromium {}<ret>'

# Pad numbers
map global user -docstring 'Pad numbers with leading zeros' 0 ': pad-number %val{count}<ret>'

# Paste
map global user -docstring 'Paste after' p '<a-!>wl-paste --no-newline<ret>'
map global user -docstring 'Paste before' P '!wl-paste --no-newline<ret>'
map global user -docstring 'Replace' R '|wl-paste --no-newline<ret>'

# Enter replace mode
map global user -docstring 'Enter replace mode' r ': enter-replace-mode<ret>'

# Terminal settings
map global normal -docstring 'Terminal' <c-w> ': enter-user-mode terminal<ret>'

# Chronic
map global normal -docstring 'Enter Chronic mode' <a-|> ': enter-user-mode chronic<ret>'
map global insert -docstring 'Enter Chronic mode' <a-|> '<esc>: enter-user-mode chronic-insert<ret>'

# Toggle highlighters
map global user -docstring 'Toggle number-lines highlighter' l ': toggle-highlighter global/number-lines number-lines<ret>'
map global user -docstring 'Toggle wrap highlighter' w ': toggle-highlighter global/wrap wrap -word<ret>'

# Hooks ────────────────────────────────────────────────────────────────────────

# Clipboard
hook global RegisterModified '"' %{
  nop %sh{
    wl-copy -- "$kak_main_reg_dquote" < /dev/null > /dev/null 2>&1 &
  }
}

# Plugins ──────────────────────────────────────────────────────────────────────

# kak-lsp
map global user -docstring 'LSP' <space> ': enter-user-mode lsp<ret>'

# Go to definition and implementation
map global goto -docstring 'Definition' d '<esc>: lsp-definition<ret>'
map global goto -docstring 'Implementation' D '<esc>: lsp-implementation<ret>'

# Enable kak-lsp
hook global WinSetOption 'filetype=(c|cpp|crystal|css|go|haskell|html|javascript|json|ocaml|reason|ruby|rust|sh|typescript)' %{
  lsp-enable-window
}

# bc ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map global normal = ': bc-prompt<ret>'
map global normal + ': bc-prompt<ret><up><ret>'

# connect ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

set-option global connect_environment %{
  SHELL=elvish
}

# Create a new window
map global normal <c-t> ': connect-terminal<ret>'
map global normal <c-n> ': connect-shell alacritty<ret>'

# Turn Kakoune into an IDE
define-command ide -params 0..1 -docstring 'ide [session-name]: Turn Kakoune into an IDE' %{
  # Session name
  try %{
    rename-session %arg{1}
  }

  # Main client
  rename-client main
  set-option global jumpclient main

  # Tools client
  new %{
    rename-client tools
    set-option global toolsclient tools
  }

  # Docs client
  new %{
    rename-client docs
    set-option global docsclient docs
  }

  # Project drawer
  dolphin

  # Git
  > lazygit

  # Terminal
  >
}

# evaluate-selections ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map global user -docstring 'Evaluate selections' = ': evaluate-selections<ret>'

# explore ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Explore files and buffers with fzf
alias global explore-files fzf-files
alias global explore-buffers fzf-buffers

# jq ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Prompts for jq
map global user -docstring 'Prompt for jq' . ': jq-prompt<ret>'
map global user -docstring 'Prompt for jq-selections' @ ': jq-prompt-selections<ret>'

# Sort selections
map global user -docstring 'Sort selections' | ': jq-selections sort<ret>'
map global user -docstring 'Sort selections in reverse order' <a-|> ': jq-selections sort | reverse<ret>'

# Reverse selections
map global user -docstring 'Reverse selections' ! ': jq-selections reverse<ret>'

# manual-indent ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

hook global WinCreate .* %{
  manual-indent-enable
}

hook global WinSetOption filetype=.* %{
  manual-indent-remove-filetype-hooks
}

# mkdir ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

hook global BufWritePre .* %{
  mkdir -p %sh(dirname "$kak_hook_param")
}

# move-line ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map global normal ⓙ ': move-line-below<ret>'
map global normal <c-k> ': move-line-above<ret>'

# snippets ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Options
set-option global snippets_scope global global/arrows global/bullets global/dashes global/punctuation

# Create new snippets
map global user -docstring 'Edit snippets' / ': snippets-edit<ret>'

# Add auto-pairs integration
map global insert <ret> '<a-;>: snippets-enter auto-pairs-insert-new-line<ret>'

# Indent snippets with tabs
hook global BufCreate '.+/\.?config/snippets/.+' %{
  set-option buffer indentwidth 0
}

# split-object ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map global normal <a-I> ': enter-user-mode split-object<ret>'

# state-save ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

hook global KakBegin .* %{
  state-save-reg-sync colon
  state-save-reg-sync pipe
  state-save-reg-sync slash
}

hook global KakEnd .* %{
  state-save-reg-sync colon
  state-save-reg-sync pipe
  state-save-reg-sync slash
}

# FIXME: Avoid dquote clobbering with yank-ring.
# hook global FocusOut .* %{
#   state-save-reg-save dquote
# }
#
# hook global FocusIn .* %{
#   state-save-reg-load dquote
# }

# surround ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Quoting
map global normal q ': enter-user-mode surround<ret>'
map global normal Q ': surround-enter-insert-mode<ret>'

# word-select ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

# Move by word instead of word start
map global normal w ': word-select-next-word<ret>'
map global normal <a-w> ': word-select-next-big-word<ret>'
map global normal b ': word-select-previous-word<ret>'
map global normal <a-b> ': word-select-previous-big-word<ret>'

# yank-ring ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

map global normal Y ': yank-ring<ret>'

# show-characters ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

hook global ModuleLoaded show-characters %{
  add-highlighter global/show-characters ref show-characters

  set-face global ShowCharactersBackground %opt{background}
  set-face global ShowCharactersDimmedBackground %opt{dimmed_background}
}

# Show various characters and keep the faces final.
provide-module show-characters %{
  # Faces
  set-face global ShowCharactersBackground default
  set-face global ShowCharactersDimmedBackground default

  # Highlighters
  add-highlighter shared/show-characters regions
  add-highlighter shared/show-characters/code default-region group

  # Whitespaces
  add-highlighter shared/show-characters/code/whitespace regex '\h+' 0:ShowCharactersBackground
  add-highlighter shared/show-characters/code/newline regex '\n+' 0:ShowCharactersDimmedBackground
  add-highlighter shared/show-characters/code/tab regex '\t+' 0:red+f
  add-highlighter shared/show-characters/code/trailing-whitespaces regex '\h+$' 0:red+f
  add-highlighter shared/show-characters/code/non-breaking-space regex ' +' 0:red+f

  # Whitespaces – Sentences
  add-highlighter shared/show-characters/code/not-two-spaces-after-sentence regex '[?!.…]\K\h(\h{2,})?(?=\w)' 0:red+f
  add-highlighter shared/show-characters/code/two-spaces-after-sentence regex '[?!.…]\K\h{2}(?=\w)' 0:green+f

  # Whitespaces – Lists
  add-highlighter shared/show-characters/code/one-space-for-ordered-list regex '\d\.\K\h(?=\w)' 0:green+f
  add-highlighter shared/show-characters/code/not-one-space-for-ordered-list regex '\d\.\K\h{2,}(?=\w)' 0:red+f

  # Whitespaces – Words
  add-highlighter shared/show-characters/code/multiple-whitespaces-after-word regex '\w\K\h{2,}' 0:red+f

  # Apostrophes
  add-highlighter shared/show-characters/code/apostrophe regex '\w\K''(?=\w)' 0:red+f

  # Dashes
  add-highlighter shared/show-characters/code/cesure regex '‐+' 0:red+f
  add-highlighter shared/show-characters/code/range-of-values regex '‑+' 0:blue+f
  add-highlighter shared/show-characters/code/u+2013 regex '–+' 0:green+f
  add-highlighter shared/show-characters/code/u+2014 regex '—+' 0:green+bf
  add-highlighter shared/show-characters/code/u+2015 regex '―+' 0:red+f
  add-highlighter shared/show-characters/code/math regex '[−×]+' 0:cyan+f

  # Quotation marks
  add-highlighter shared/show-characters/code/opening-quotation-mark regex '[“‘]+' 0:cyan+f
  add-highlighter shared/show-characters/code/closing-quotation-mark regex '”+' 0:cyan+uf
}

require-module show-characters

# gtd ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈

declare-option bool gtd

hook global BufCreate '.*/diary/\d{4}\.md' %{
  set-option buffer gtd yes
}

hook global WinSetOption gtd=true %{

  require-module gtd
  evaluate-commands set-option window static_words %opt{gtd_keywords}
  add-highlighter window/gtd ref gtd

  alias window gtd gtd-grep-todo
  alias window g+ gtd-grep-scheduled
  alias window g! gtd-grep-deadline
  alias window g+h gtd-grep-hourly
  alias window g+d gtd-grep-daily
  alias window g+w gtd-grep-weekly
  alias window g+m gtd-grep-monthly
  alias window g+y gtd-grep-yearly

  map window normal <a-d> ': gtd-jump-to-day<ret>'
  map window normal <c-d> ': gtd-todo-done<ret>'
  map window normal <c-u> ': gtd-todo-canceled<ret>'
  map window insert <c-y> '<a-;>: gtd-insert-date<ret>'
  map window insert <c-u> '<a-;>: gtd-insert-time<ret>'

  hook -always -once window WinSetOption gtd=false %{
    remove-highlighter window/gtd
  }
}

provide-module gtd %{
  declare-option -hidden str-list gtd_keywords 'Aborted' 'Buy' 'Call' 'CANCELED' 'Constat' 'Day' 'Days' 'Deadline' 'DONE' 'Fix' 'Fixed point' 'Fixes' 'Go to' 'Habits' 'Hour' 'Hours' 'How to' 'Month' 'Months' 'Postponed' 'Read' 'Reason' 'Rule' 'Scheduled' 'Status' 'TODO' 'Try' 'Waiting' 'Watch' 'Week' 'Weeks' 'Year' 'Years'

  add-highlighter shared/gtd regions
  add-highlighter shared/gtd/code default-region group

  evaluate-commands %sh{
    # Keywords
    eval "set -- $kak_quoted_opt_gtd_keywords"
    regex="\\b(?:\\Q$1\\E"
    shift
    for keyword do
      regex="$regex|\\Q$keyword\\E"
    done
    regex="$regex)\\b"
    printf "add-highlighter shared/gtd/code/keywords regex '%s' 0:keyword\n" "$regex"
  }

  define-command gtd-jump-to-day %{
    set-register / "^# \K%sh(date '+%F\.%a')$"
    execute-keys '<space>n'
    set-register / '^# \K\d{4}-\d{2}-\d{2}\.\w{3}$'
  }

  define-command gtd-todo-done %{
    execute-keys -draft '<a-x>sTODO<ret>cDONE<esc>'
  }

  define-command gtd-todo-canceled %{
    execute-keys -draft '<a-x>sTODO<ret>cCANCELED<esc>'
  }

  define-command gtd-grep-todo %(grep 'TODO')
  define-command gtd-grep-scheduled %(grep 'Scheduled')
  define-command gtd-grep-deadline %(grep 'Deadline')
  define-command gtd-grep-hourly %(grep '\+\d+Hours?')
  define-command gtd-grep-daily %(grep '\+\d+Days?')
  define-command gtd-grep-weekly %(grep '\+\d+Weeks?')
  define-command gtd-grep-monthly %(grep '\+\d+Months?')
  define-command gtd-grep-yearly %(grep '\+\d+Years?')

  define-command gtd-insert-date %(execute-keys -draft '!date ''+%F'' | tr -d ''\n''<ret>')
  define-command gtd-insert-time %(execute-keys -draft '!date ''+%R'' | tr -d ''\n''<ret>')
}
