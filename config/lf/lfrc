# Options ──────────────────────────────────────────────────────────────────────

set shell dash

# [-e] → Exit on error
# [-u] → Give error for unset variables
set shellopts -eu

# Newline as IFS and file separator
# Let’s just pretend filenames can’t contain the newline character
set ifs "\n"
set filesep "\n"

# Commands ─────────────────────────────────────────────────────────────────────

cmd open ${{
  case $(mime $f) in
    text/*)
      $EDITOR $fx
      ;;
    video/*)
      mpv $fx
      ;;
    image/*)
      mpv -profile image $fx
      ;;
    audio/*)
      mpv -profile audio $fx
      ;;
    *)
      for file in $fx; do
        $OPENER $file < /dev/null > /dev/null 2>&1 &
      done
      ;;
  esac
}}

cmd create-new-file ${{
  file=$1
  if test -e "$file"; then
    lf -remote "send $id echo File exists: $file"
    exit 1
  fi
  directory=$(dirname "$file")
  mkdir -p "$directory"
  touch "$file"
  lf -remote "send $id select $file"
}}

cmd create-new-directory ${{
  directory=$1
  if test -e "$directory"; then
    lf -remote "send $id echo File exists: $directory"
    exit 1
  fi
  mkdir -p "$directory"
  lf -remote "send $id select $directory"
}}

# Execute shell command on selection
cmd embed $$@ $fx

cmd select-fuzzy ${{
  lf -remote "send $id select $(fd --type file | fzf)"
}}

cmd cd-fuzzy ${{
  lf -remote "send $id cd $(fd --type directory | fzf)"
}}

cmd batch ${{
  batch --editor kak --map 'rename "$1" "$2"' --drop 'trash "$1"' $fx
}}

# Mappings ─────────────────────────────────────────────────────────────────────

map <enter> open
map . set hidden!
map ~ cd ~
map w $$SHELL
map <delete> embed trash
map | embed bat
map e embed kak
map m embed mpv
map x embed arc unarchive
map W embed git add
map s select-fuzzy
map g cd-fuzzy
map b batch
map <f-2> push :create-new-file<space>
map <f-3> push :create-new-directory<space>
map <c-n> $alacritty --command lf &
